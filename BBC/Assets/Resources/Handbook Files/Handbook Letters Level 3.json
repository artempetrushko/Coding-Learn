{
  "Items": [
    {
      "Title": "Циклы. Цикл for",
      "Description":"Циклы являются управляющими конструкциями, позволяя в зависимости от определенных условий выполнять некоторое действие множество раз. В C# имеются следующие виды циклов: <color=blue>for, foreach, while</color>.\n <color=darkblue><b>Цикл for </b></color>имеет следующее формальное определение:\n for ([инициализация счетчика]; [условие]; [изменение счетчика])\n {\n  <color=green>// действия</color>\n }\nРассмотрим стандартный цикл for:\n for (int i = 0; i < 9; i++)\n {\n  Console.WriteLine($\"Квадрат числа {i} равен {i*i}\");\n }\nПервая часть объявления цикла - int i = 0 - создает и инициализирует счетчик i. Счетчик необязательно должен представлять тип int. Это может быть и другой числовой тип, например, float. И перед выполнением цикла его значение будет равно 0. В данном случае это то же самое, что и объявление переменной.\nВторая часть - условие, при котором будет выполняться цикл. Пока условное выражение возвращает true, будет выполняться цикл. В данном случае цикл будет выполняться, пока счетчик i не достигнет 9.\nИ третья часть - приращение счетчика на единицу. Опять же нам необязательно увеличивать на единицу. Можно уменьшать: i--.\nВ итоге блок цикла сработает 9 раз, пока значение i не станет равным 9. И каждый раз это значение будет увеличиваться на 1."
    },
    {
      "Title": "Операторы break и continue",
      "Description": "Иногда возникает ситуация, когда требуется выйти из цикла, не дожидаясь его завершения. В этом случае мы можем воспользоваться оператором <color=darkblue><b>break</b></color>. Например:\n for (int i = 0; i < 9; i++)\n {\n  if (i == 5)\n  break;\n  Console.WriteLine(i);\n }\n Хотя в условии цикла сказано, что цикл будет выполняться, пока счетчик i не достигнет значения 9, в реальности цикл сработает 5 раз. Так как при достижении счетчиком i значения 5, сработает оператор break, и цикл завершится.\n Теперь поставим себе другую задачу. А что, если мы хотим, чтобы при проверке цикл не завершался, а просто пропускал текущую итерацию. Для этого мы можем воспользоваться оператором <color=darkblue><b>continue</b></color>:\n for (int i = 0; i < 9; i++)\n {\n  if (i == 5)\n  continue;\n  Console.WriteLine(i);\n }\n В этом случае цикл, когда дойдет до числа 5, которое не удовлетворяет условию проверки, просто пропустит это число и перейдет к следующей итерации."
    },
    {
      "Title": "Цикл while",
      "Description": "Цикл <color=blue><b>while</b></color> сразу проверяет истинность некоторого условия, и если условие истинно, то код цикла выполняется:\n int i = 6;\n while (i > 0)\n {\n  Console.WriteLine(i);\n  i--;\n }\n Здесь код цикла сработает 6 раз, пока i не станет равным нулю. for и while теоретически взаимозаменяемы, однако нужно понимать, когда стоит использовать каждый из них. Вот рекомендации по выбору между for и while:\n Заранее известно сколько раз нужно повторить действие — используйте <color=blue><b>for</b></color>.\n Есть переменная, изменяемая каждую итерацию и у нее есть понятный смысл — используйте <color=blue><b>for</b></color>.\n Иначе — используйте <color=blue><b>while</b></color>.\n <color=orange><b>Бесконечный цикл</b></color> – это цикл, написанный таким образом, что он никогда не прекратит своё выполнение, так как никогда не выполнится условие выхода из этого цикла.\n В целом, бесконечные циклы считаются плохим тоном и почти всегда являются следствием неправильно написанной программы. Однако случаются моменты, когда такие циклы бывают довольно полезны. Например, если, необходимо, чтобы программа не закрывалась или чтобы из неё не было выхода. Операционные системы и некоторые программы микроконтроллеров зачастую также представляют собой бесконечные циклы.\n Несмотря на то, что в бесконечном цикле никогда не выполняется условие выхода из него, можно произвести его остановку, например, при помощи оператора <color=blue>break</color>. Используя данный оператор, можно вызвать немедленное прерывание цикла, даже если условие цикла ещё не было выполнено.\n int i = 0;\n for (; ; )\n {\n  i++;\n  Console.WriteLine(i);\n  if (i==12345) break;\n }"
    },
    {
      "Title": "Цикл do-while",
      "Description": "Оператор <color=blue><b>do</b></color> выполняет оператор или блок операторов, пока определенное логическое выражение равно значению<color=blue> true</color>. Так как это выражение оценивается после каждого выполнения цикла, цикл do выполняется один или несколько раз. Это отличает его от цикла <color=blue>while</color>, который выполняется от нуля до нескольких раз. В следующем примере показано применение оператора do.\n int n = 0;\n do\n {\n  Console.Write(n);\n  n++;\n }\n while (n < 5); <color=green>// Output: 01234</color>"
    },
    {
      "Title": "Вложенные циклы",
      "Description":"Как и условные конструкции, циклы также могут быть вложены друг в друга. <color=orange> <b>Вложенные циклы</b></color> – это циклы, организованные в теле другого цикла. Вложенный цикл в тело другого цикла, называется внутренним циклом. Цикл, в теле которого существует вложенный цикл, называется внешним.\nПолное число исполнений внутреннего цикла, всегда равно произведению числа итераций внутреннего цикла на произведение чисел итераций всех внешних циклов, например, если внешний цикл имеет 5 итераций, а внутренний 10, то общее число итераций внутреннего цикла будет 5 * 10 = 50 итераций. Пример с вложением одного цикла for в другой цикл for:\n for (int i = 0; i < 10; i++)\n {\n for (int j = 0; j < 10; j++)\n  {\n  Console.Write(\"*\");\n  }\n <color=red><i>Примечание</i></color>: для переменных счётчиков также действуют правила областей видимости, поэтому во вложенном цикле в качестве переменной счётчика нельзя снова создать переменную i – при попытке создания будет ошибка!\n Одна из проблем, связанных с вложенными циклами – это организация досрочного выхода из них. Решений у этой проблемы несколько, одна из них – использовать оператор безусловного перехода goto, другим же вариантом будет <color=yellow>создание переменной-флажка</color>, значение которой будет обозначать необходимость прервать работу циклов, например:\n bool flag = false;\n for (int i = 0; i < 10; i++)\n {\n for (int j = 0; j < 10; j++)\n  {\n  Console.Write('*');\n  if (j == 5 && i == 3)\n  {\n  flag = true;\n  break;\n  }\n }\n if (flag == true) break;\n <color=red><i>Примечание</i></color>: вложенными могут быть разные циклы!"
    }
  ]
}