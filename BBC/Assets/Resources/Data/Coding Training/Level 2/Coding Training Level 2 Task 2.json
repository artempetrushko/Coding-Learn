{
  "Items": [
    {
      "Title": "Ветвления (продолжение)",
      "Info": "     Неплохо, теперь мы можем писать более сложные программы. Но всё равно есть проблема: пока что мы умеем реализовывать только 2 варианта развития событий. А как сделать так, чтобы у нас было <color=green>много</color> условий и так же много вариантов дальнейших действий?\n",
      "VideoTitles": ""
    },
    {
      "Title": "Конструкция else if",
      "Info": "     Конечно, мы могли бы попытаться в if и else записать ещё if и else, и порой так можно и нужно сделать. Но не всегда.\n     Куда более полезной более конструкция <color=green>else if</color> (\"иначе если\"). Она позволяет выполнить некоторый код, если условие в if ложно, но <color=green>другое условие</color> (которое написано в скобках после else if) истинно. Если же и оно будет ложно, то будет выполнен код из else.\n     Стоит отметить, что таких else if мы можем написать <color=green>сколь угодно много</color> и, таким образом, сделать программу очень гибкой. Главное, с этим не переборщить!",
      "VideoTitles": "Branching Else If"
    },
    {
      "Title": "Множественные условия",
      "Info": "     Хотя else if позволяет учесть множество условий, иногда это может привести к разрастанию и дублированию кода, которых стоит избегать. Тем более когда можно использовать иной подход.\n     В условных конструкциях можно указывать не одно, а <color=green>несколько</color> условий. В этом нам помогут такие условные операторы, как <color=green>&&</color> (логическое <color=green>И</color>) и <color=green>||</color> (логическое <color=green>ИЛИ</color>).\n     Если между двумя условиями стоит &&, то выражение будет истинно, когда <color=green>оба условия истинны</color>. Если же будет стоять ||, для истинности выражения будет достаточно истинности <color=green>хотя бы одного из условий</color>.",
      "VideoTitles": "Branching Multiple Conditions"
    },
    {
      "Title": "И ещё немного операторов",
      "Info": "     Прежде чем приступить к заданию, мы хотели рассказать ещё о некоторых полезных операторах.\n     Помимо тех, что мы упоминали ранее, есть также <color=green>==</color> и <color=green>!=</color>. Первый - оператор равенства, с его помощью можно проверить, равна ли левая часть (или, как принято её называть, <color=green>операнд</color>) правой. Второй работает с точностью наоборот: выражение будет истинно, если левый операнд не равен правому.",
      "VideoTitles": "Branching Extra Operators"
    }
  ]
}