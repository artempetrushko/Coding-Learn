{
  "Items": [
    {
      "Title": "Ветвления",
      "Info": "     Вы стали отлично справляться с написанием простых программ! Пришла пора освоить что-то более сложное.\n     Если вы вспомните, какими были ваши решения, то, возможно, заметите их общее сходство - все команды в них выполнялись <color=green>последовательно</color>, друг за другом. \"Но ведь нельзя сделать все программы такими!\" - скажете вы, и будете правы. Поэтому пришла пора рассказать вам про <color=green>ветвления</color>.",
      "VideoTitles": ""
    },
    {
      "Title": "Ветвления. Конструкции if, else",
      "Info": "     <color=green>Ветвления</color> дают возможность выполнять <color=green>различный</color> код в зависимости от некоторого <color=green>условия</color>. Чтобы это осуществить, во многих языках, включая C#, есть специальные <color=green>условные конструкции if</color> и <color=green>else</color>.\n     Как их можно интерпретировать? Всё просто: если (<color=green>if</color>) некоторое условие истинно, то выполняется код, следующий после if в фигурных скобках; в противном случае (<color=green>else</color>) будет выполнена другая часть кода, следующая в скобках после else.",
      "VideoTitles": "Branching If Else"
    },
    {
      "Title": "Логические операторы и выражения",
      "Info": "     Ну хорошо, а что за условия должны выполняться и как их писать в коде? На самом деле, их вариаций крайне много, но мы начнём с простых и всем известных - математических.\n     Безусловно, вам известны такие условия, как <, >, <=, >=. Это <color=green>логические операторы</color>, и с их помощью мы и будем создавать условия. Например, в круглых скобках после if можно проверять, число А больше числа B или нет. Если да, выполнится код из секции if, в противном случае - из секции else.\n     Ну и коль скоро мы можем сравнивать числа, вы можете также сравнивать и <color=green>переменные</color>, хранящие их.",
      "VideoTitles": "Branching Logic Expressions"
    }
  ]
}