{
  "Items": [
    {
      "Title": "Библиотека Math и приведение типов",
      "Info": "     Порой для решения задачи требуется провести операции над числами, куда более сложные, чем, скажем, сложение или умножение. Что если нужно округлить число, возвести в n-ю степень или найти синус угла?\n     Для таких случаев в стандартной библиотеке <color=green>System</color> (которая в нашем планшете подключена по умолчанию) есть специальная библиотека <color=green>Math</color>. Она содержит множество полезных <color=green>математических</color> функций и констант, которые порой оказываются крайне полезны.",
      "VideoTitles": ""
    },
    {
      "Title": "Функция Round()",
      "Info": "     Разумеется, мы не можем не продемонстрировать вам парочку функций из этой библиотеки!\n     Одна из них - функция <color=green>округления</color> Math.Round(). У неё есть несколько режимов работы (о них можно прочитать в документации по C#), однако нам будет достаточно базового, когда функция работает по правилам математики: если число <color=green>больше или равно 0.5</color>, число округляется в <color=green>бОльшую</color> сторону, в противном случае - в меньшую.",
      "VideoTitles": "Video1"
    },
    {
      "Title": "Аргументы и выход функции Round",
      "Info": "     В качестве аргумента функция Round принимает переменные типа <color=green>double</color>. Однако и возвращает она результат типа double. А порой нам хотелось бы получить int - как быть?",
      "VideoTitles": "Video2"
    },
    {
      "Title": "Приведение типов - cast",
      "Info": "     Тут нам поможет такая возможность языка, как <color=green>приведение</color> (преобразование) типов (по англ. <color=green>cast</color>). Любой тип данных можно привести к какому-то другому (но не к любому!), причём это может происходить <color=green>явно</color> и <color=green>неявно</color>.\n     <color=green>Неявное</color> приведение язык выполнит сам, это возможно, когда новый тип принимает <color=green>бОльший диапазон/color> значений (например, так можно привести int к double). Если, наоборот, новый тип принимает <color=green>меньший</color> диапазон значений, то нужно в скобках указать, к какому типу мы хотим привести.",
      "VideoTitles": "Video2"
    },
    {
      "Title": "Опасность cast'a",
      "Info": "     Если неявный cast довольно прозрачен и понятен, то явное приведение порой выполнять <color=red>опасно</color>!\n     Дело в том, что во время приведения, когда диапазон значений нового типа сузится, мы можем потерять часть данных. Например, если переменная типа double хранит число с дробной частью, то при cast-е к int дробная часть просто пропадёт, поскольку int хранит только целую часть!\n     В нашей игре вы можете спокойно выполнять приведение типов, где оно требуется, но в реальных задачах, используя явный cast, будьте предельно аккуратны!",
      "VideoTitles": "Video2"
    }
  ]
}