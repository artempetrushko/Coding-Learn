{
  "Items": [
    {
      "ID": 1,
      "Title": "Path Selection",
      "Description": " - You need to implement a method that chooses a path. Their difficulty levels are passed to you.\n Decide which path is easier and return the desired direction (left or right) as a string. \nIf the difficulty is the same, either path can be chosen.",
      "StartCode": "public string ChooseTurn(int leftPathDifficulty, int rightPathDifficulty)\n{\n    \n    return \"left\";\n    \n}\n"
    },
    {
      "ID": 2,
      "Title": "What to do with the log?",
      "Description": " - You need to implement a method that decides what to do with the current log.\n The length of the log is passed to the method. If the length of the log is less than or equal to 3, nothing needs to be done with it.\nIf it is greater than 3, but less than 7, put it in the wagon.\n If greater than or equal to 7, cut the log.\n Use SkipLog, PutLogInCart and Ð¡hopLog methods respectively",
      "StartCode": "public void MakeDecision(int logLength)\n{\n    \n    \n}\n"
    },
    {
      "ID": 3,
      "Title": "Perfect Mushroom",
       "Description": " - You need to implement a method that selects the perfect mushroom.\n A mushroom that is neither too young nor too old is considered ideal.\n You are given the age of 3 mushrooms. You need to return the age of the most suitable of them.",
      "StartCode": "public int ChooseIdealMushroom(int fitsAge, int secondAge, int thirdAge)\n{\n    \n    \n}\n"
    },
    {
      "ID": 4,
      "Title": "To flood or not to flood, that is the question.",
      "Description": " - You need to implement a method that fills the fire if there is water in the bucket, otherwise it fills the bucket with water.\n The bool state of the bucket is passed as a parameter.\n To fill the fire or fill the bucket, use the PutOutFire methods or FillBucket respectively.",
      "StartCode": "public void MakeDecision(bool isBusketFull)\n{\n    \n    \n}\n"
    },
    {
      "ID": 5,
      "Title": "Go across the bridge.",
      "Description": " - You need to implement a method that signals the start of movement across the bridge.\n However, if the bridge is broken, you must replace it with the most suitable log, and only then signal the start of movement. It is guaranteed that a suitable log exists\nThe state of the bridge is passed as input as a bool, the length of the account through which the bridge runs and the lengths of 3 available logs.\n To signal the start of movement, return the current state of the bridge (if logs were used, then the state of the bridge must be changed to slave). \n To use the UseLog method, passing in the length of a suitable log to use the desired log.",
      "StartCode": " public bool MoveAcrossBridge(bool brogeState, int brigeLength, int firstLogLength, int secondLogLength, int thirdLogLength)\n{\n    \n    \n}\n"
    },
    {
      "ID": 6,
      "Title": "One of many",
      "Description": " - You need to implement a method that will return 1 of a set of paths, based on the number of stones passed. Here is a list of matches (number of stones - path): 1-8,2-3,3-5,4-2, 5-9,6-10,7-6,8-12. In other cases, the path number is 1.",
      "StartCode": "public int ChoosePath(int stonesNumber)\n{\n    \n    \n}\n"
    },
    {
      "ID": 7,
      "Title": "Stupid riddles!",
       "Description": " - You need to implement a method that will return 1 paths, based on the passed cipher as a string. Here is the correspondence of ciphers and paths (cipher-path): nagibator228-6,urfu-2,coding-5,learn-4 .In other cases, the path is 1.",
      "StartCode": "public int ChoosePath(string cipher)\n{\n    \n    \n}\n"
    }
  ]
}