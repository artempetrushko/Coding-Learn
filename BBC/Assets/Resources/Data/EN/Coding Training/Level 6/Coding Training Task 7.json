{
  "Items": [
    {
      "Title": "Class StringBuilder",
      "Info": "Although the System.String class provides us with a lot of functionality for working with strings, it still has its drawbacks. First of all, the String object is an immutable string. When we execute any method of the String class, the system creates a new object in memory with sufficient space allocated to it.For example, deleting the first character is not the most expensive operation.However, when there are many such operations, and the amount of text for which these operations must be performed is also not the smallest, then the performance loss becomes more significant. \nThe same applies to string addition, which we did earlier.\n\nTo overcome this situation, a new StringBuilder class has been added to C#.",
      "VideoTitles": ""
    },
    {
      "Title": "Creating a StringBuilder",
      "Info": "You can think of a StringBuilder as a string constructor. To use it, you first need to create it and pass it the string you want to work with.\n\nLike strings, it has a Length property to get length and possibility of indexing.",
      "VideoTitles": "6.7.1"
    },
    {
      "Title": "String Operations in StringBuilder",
      "Info": "For operations on strings, the StringBuilder class defines a number of methods. Note that although its functionality is similar to that of strings, it is much faster on large amounts of data:\n\n * Append: appends a substring to a StringBuilder\n\n * Insert: Inserts a substring into the StringBuilder object, starting at a specific index\n\n * Remove: Removes a specific number of characters, starting at a specific index\n\n * Replace: Replaces all occurrences of a specific character or substring with another character, or substring\n\n * AppendFormat: Appends a substring to the end of the StringBuilder object",
      "VideoTitles": "6.7.2"
    }
  ]
}