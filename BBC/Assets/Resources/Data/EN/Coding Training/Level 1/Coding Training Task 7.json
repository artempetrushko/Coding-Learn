
{
"Items": [
{
"Title": "Shortcut Operations",
"Info": "We have mastered arithmetic in C#, and that's good! But there is a problem: sometimes it may be necessary, for example, to add some number to an already initialized variable. Such an instruction will be quite <color=red>long</color=red> color> due to the fact that <color=red>duplicate</color> is the name of the variable, which is not good.",
"VideoTitles": "Too Long Addition"
},
{
"Title": "Shortcut Operations",
"Info": " But there is a more elegant way to do this - using <color=green>abbreviated</color> arithmetic operations. For example, you can use the operator <color=green>+=</color> and thus add to variable some number.Similar operators for subtraction (<color=green>-=</color>), multiplication (<color=green>*=</color>) and division (<color=green>/= </color>).",
"VideoTitles": "Shortened Operations"
},
{
"Title": "Increment and decrement",
"Info": " And if we need to add or subtract one from a variable, there is an even cooler way - use the <color=green>increment</color> (<color=green>++</color>) or <color=green>decrements</color> (<color=green>--</color>) Although they are very easy to use, there are some nuances.",
"VideoTitles": "Increment Usage"
},
{
"Title": "Prefix and postfix operators",
"Info": "There are two ways to apply increment and decrement - write it <color=green>before the variable</color> or <color=green>after it</color>. This does not affect the result that will end up in the variable, but it affects the <color=green>order of execution</color> of the program in some cases.For example, when passing a variable with an increment to the method, two scenarios are possible:\n 1) If the increment is <color=green>prefix</color>, first the variable will increase its value, then it will be passed to the method;\n 2) If the increment is <color=green>postfix</color>, first the variable will be passed with the old value, then the increment will work.\n Output: when using ++ or -- <color=green>be careful</color>!",
"VideoTitles": "Nuances of Increment"
}
]
<<<<<<< Updated upstream
}
=======
}
>>>>>>> Stashed changes
