{
  "Items": [
    {
      "Title": "Branches",
      "Info": "     You've gotten really good at writing simple programs! It's time to learn something more complex.\n If you remember what your solutions were, you might notice their general similarity - all the commands in them were executed by <color =green>sequentially</color>, one after another. \"But you can't make all programs like this!\" - you will say, and you will be right. Therefore, it's time to tell you about <color=green>branching</color>.",
      "VideoTitles": ""
    },
    {
      "Title": "Branches. If, else constructs",
      "Info": "     color=green>Branches</color> make it possible to execute <color=green>different</color> code depending on some <color=green>condition</color>. To do this, in many languages, including C#, have special <color=green>if</color> and <color=green>else</color> conditionals.\n How can they be interpreted? It's simple: if (<color=green>if< /color>) some condition is true, then the code following the if in curly braces is executed; otherwise (<color=green>else</color>) the other part of the code following the if in curly braces is executed.",
      "VideoTitles": "Branching If Else"
    },
    {
      "Title": "Logical operators and expressions",
      "Info": "     Well, what kind of conditions should be met and how to write them in code? In fact, there are a lot of variations of them, but we will start with simple and well-known - mathematical ones.\n Of course, you know such conditions, like <, >, <=, >=. These are <color=green>logical operators</color>, and with their help we will create conditions.For example, in parentheses after if, you can check whether the number A is greater than the number B or No. If so, the code in the if section will be executed, otherwise, the code in the else section will be executed.\n Well, since we can compare numbers, you can also compare the <color=green>variables</color> that store them.",
      "VideoTitles": "Branching Logic Expressions"
    }
  ]
}