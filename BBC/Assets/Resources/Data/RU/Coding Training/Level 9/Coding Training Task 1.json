{
  "Items": [
    {
      "Title": "Алгоритмы и их эффективность",
      "Info": "В программировании нам часто приходится работать с набором данных, например искать в нем элементы или сортировать его. Для подобных целей мы используем алгоритмы, да и вообще, можно сказать, что вся программа - это один сплошной алгоритм.\nАлгоритм представляет собой последовательность шагов, которая призвана решить определенную задачу. Иными словами алгоритм - это способ решения этой задачи.\n\nВажным критерием алгоритма выступает эффективность. Алгоритм может прекрасно решать поставленную задачу, но при этом быть не эффективным. Как правило, под эффективностью алгоритма подразумевается время, за которое должен выполняться данный алгоритм. Можно ещё посмотреть на эффективность алгоритма с точки зрения требуемой для работы памяти, однако мы этого касаться не будем. \n",
      "VideoTitles": " "
    },
    {
      "Title": "Основные типы сложности алгоритмов",
      "Info": "Сложность алгоритма обозначает то, сколько операций в худшем случае выполнит алгоритм, прежде чем вернет верный ответ.  В зависимости от эффективности существует много типов алгоритмов, среди которых можно выделить следующие (перечислены в порядке уменьшения эффективности):\n\n1. Константный (const)\nВыполняет фиксированное количество операций, которые, как правило, требуют постоянного времени. Например, представим алгоритм, который печатает на экран первые 5 элементов из массива. Тогда в худшем случае ему придется выполнить 5 итераций, а если массив короткий, длиной всего 3, то алгоритм выполнить лишь 3 итерации. \n",
      "VideoTitles": " "
    },
    {
      "Title": "2. Логарифмический (logN)",
      "Info": "Здесь и далее N - размер входных данных в алгоритм.\nЛогарифмический алгоритм выполняется медленнее, чем программы с постоянным временем. Рост времени выполнения при росте N будет увеличиваться на некоторую постоянную величину.\n",
      "VideoTitles": " "
    },
    {
      "Title": "3. Линейный (N)",
      "Info": "Здесь выполнение метода зависит от n. Какое значение для n будет передано в метод, столько раз и будет выполняться цикл. То есть рост трудоемкости алгоритма для данного метода пропорционален значению n, поэтому его и называют линейный.\n",
      "VideoTitles": " "
    },
    {
      "Title": "4. Квадратичный (N^2)",
      "Info": "Как правило, методы, которые соответствуют данному алгоритму, содержит два цикл - внешний и вложенный, которые выполняются для всех значений вплоть до N.\n\nСуществуют и другие вариации, и одну из них мы затронем чуть позже. Стоит также отметить, что обычно сложность обозначается буквой “O”. Так например, для квадратичного алгоритма сложность будет O(N^2). У этой буквы есть определенный смысл, однако пока что мы не будем в него углубляться и будем считать, что она просто обозначает сложность.\n",
      "VideoTitles": " "
    },
    {
      "Title": "Пузырьковая сортировка",
      "Info": "Сортировка пузырьком — один из самых известных алгоритмов сортировки. Здесь нужно последовательно сравнивать значения соседних элементов и менять числа местами, если предыдущее оказывается больше последующего. Таким образом элементы с большими значениями оказываются в конце списка, а с меньшими остаются в начале.\n\nЭтот алгоритм считается учебным и почти не применяется на практике из-за низкой эффективности: он медленно работает на тестах, в которых маленькие элементы (их называют «черепахами») стоят в конце массива. Однако на нём основаны многие другие методы, например, шейкерная сортировка и сортировка расчёской. Сложность такого алгоритма довольно большая - О(N^2)\n–GIF–",
      "VideoTitles": "9.1"
    },
    {
      "Title": "Алгоритм пузырьковой сортировки",
      "Info": "Демонстрация в видеофрагменте",
      "VideoTitles": "9.2"
    }
  ]
}