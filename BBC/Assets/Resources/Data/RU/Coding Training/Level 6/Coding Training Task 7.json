{
  "Items": [
    {
      "Title": "Класс StringBuilder",
      "Info": "Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет свои недостатки. Прежде всего, объект String представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с выделением ему достаточного места. Например, удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере производительности становятся более существенными.\nТо же самое касается и сложения строк, которым мы занимались ранее.\n\nЧтобы выйти из этой ситуации в С# был добавлен новый класс StringBuilder.",
      "VideoTitles": ""
    },
    {
      "Title": "Создание StringBuilder",
      "Info": "StringBuilder можно воспринимать как конструктор строк. Чтобы его использовать, для начала его нужно создать и передать в него строку, с которой планируется работать.\n\nУ него так же, как и у строк, есть свойство Length для получения длины и возможность индексации.\n\n–IMAGE–",
      "VideoTitles": "6.1.7"
    },
    {
      "Title": "Операции со строками в StringBuilder",
      "Info": "Для операций над строками класс StringBuilder определяет ряд методов. Обратите внимание, что хоть его функционал и напоминает функциональность строк, но на больших объемах данных он работает намного быстрее:\n\n   * Append: добавляет подстроку в объект StringBuilder\n\n   * Insert: вставляет подстроку в объект StringBuilder, начиная с определенного индекса\n\n   * Remove: удаляет определенное количество символов, начиная с определенного индекса\n\n   * Replace: заменяет все вхождения определенного символа или подстроки на другой символ или подстроку\n\n   * AppendFormat: добавляет подстроку в конец объекта StringBuilder\n\n–IMAGE–",
      "VideoTitles": "6.2.7"
    }
  ]
}