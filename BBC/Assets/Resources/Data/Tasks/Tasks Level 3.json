{
  "Items": [
    {
      "ID": 1,
      "Title": "Чёрные ящики",
      "Description": "Вам необходимо раализовать метод, который отрывает ящики и слитает количество успешно открытых. На вход передается общее количество ящиков. Необходимо вернуть количество успешно открытых ящиков.\n Чтобы открыть ящик используйте метод OpenContainer, который принимает порядковый номер ящика начиная с нуля, который нужно открыть и возвращеет trut/false если ящик удалось/не удалось открыть.",
      "StartCode": "public int OpenAndCountContainer(int boxesCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 2,
      "Title": "Хорошая находка",
      "Description": "Вам необходимо реализовать метод который находит в ящиках топор или пилу и дает сигнал о том, что текущий инструмент нужно подобрать.\n На вход передется количество инструментов. Чтобы проверить инструмент используйте методы  IsSaw и IsAxe. Чтобы подобрать инструмент используйте метод PickUp.\n Все три метода принимают номер проверяемого ящика начиная с нуля.",
      "StartCode": "public void FindNeededTool(int toolsCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 3,
      "Title": "Путь свободен!",
      "Description": "Вам необходимо реализовать метод, который расчищает путь до тех пор, пока он не станет свободен.\n Чтобы проверить, что путь чист ипользуйте метод IsPathClear. Чтобы очистить текущий участок пути используйте метод UseTool",
      "StartCode": "public void ClearPath()\n{\n    \n    \n}\n"
    },
    {
      "ID": 4,
      "Title": "Лесозаготовки",
      "Description": "Вам необходимо реализовать метод, который определяет сколько нужно срубить деревьев и отправляет сигнал о том, что нужно испоьзовать инструмент, чтобы разделить бревно.\n На вход передается необходимое число бревен. Вернуть необходимое число деревьев.\n Из простого дерева получается 2 бревна, из высокого -- 4. Чтобы определить длинное ли дерево, используйте метод IsTreeTall. Чтобы разделить текущее дерево используйте метод UseTool.",
      "StartCode": "public int GetNeededTree(int neededLogsCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 5,
      "Title": "Наводим мосты: Часть вторая",
      "Description": "Вам необходимо реализовать метод, который ремонтирует мост по частям(если это необходимо).\n На вход передается количество частей моста. Чтобы определить нужно ли чинить текущую часть, используйте метод IsBroken. Чтобы подчинить часть моста используйте метод SetUpBoard.\n Оба метода принимают порядковый номер части моста начиная с 0.",
      "StartCode": "public void RepairBrige(int partsCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 6,
      "Title": "Тщательный осмотр",
      "Description": "Вам необходимо реализовать метод, который ищет ключ.\n На вход передается количество мест в которых может быть ключ.\n Чтобы поискать ключ в месте для поиска используйте метод TryFoundKey, который принемает порядковый номер места для поиска и возвращает true/false, если нашел/не нашел ключ.",
      "StartCode": "public void FoundKey(int plasesCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 7,
      "Title": "Лотерея",
      "Description": "Вам необходимо реализовать метод, который ищет ключ в сундуках.\n На вход передается количество сундуков.\n Чтобы выбрать следующий сундук используйте метод ChooseNextItem. Чтобы проверить есть ли ключ в ящике используете метод IsKeyFound.",
      "StartCode": "public void FoundKey(int chestsCount)\n{\n    \n    \n}\n"
    },
    {
      "ID": 8,
      "Title": "Маленький помощник",
      "Description": "Вам необходимо реализовать метод, который ищет ключ в песке.\n На вход передается число мест, в которых может быть ключ.\n Чтобы копать используйте метод Dig, который принимает количество копок.\n Чтобы посмотреть есть ли в раскопаном месте ключ используйте метод IsKeyFound.\n Число копок на 1 выше порядкового номера места, начиная с 1.",
      "StartCode": "public void FoundKeyInSand(int placesCount)\n{\n    \n    \n}\n"
    }
  ]
}