{
  "Items": [
    {
      "ID": 1,
      "Title": "Раз ромашка, два ромашка...",
      "Description": "  - Создай переменную redFlowersCount и запиши в неё количество красных цветков\n  - Создай переменную yellowFlowersCount и запиши в неё количество жёлтых цветков\n  - Верни сумму всех цветков на лужайке",
      "ExtendedDescription": "     Итак, вспомним, на чём мы остановились.\n     В последней задаче в конце мы записали несколько переменных через знак \"+\" и получили их сумму. Да, мы можем выполнять <b><color=green>арифметические</color></b> (и многие другие) операции не только с числами, но и с <b><color=green>переменными</color></b>, которые их содержат! Это одна из базовых функций любого языка программирования.\n     Познакомимся с простой арифметикой, и для начала - со сложением, хотя вы уже и знакомы с ним. Поработаем с ним ещё разок!\n     На лужайке рядом с домом растёт много всего. Видите цветы? Посчитаем, сколько их тут растёт.",
      "StartCode": "public int Execute()\n{\n\n\n}"
    },
    {
      "ID": 2,
      "Title": "Грибное топливо",
      "Description": "  - Создайте переменную volume и в неё формулу для расчёта объёма. Формула для объёма полусферы:\n     V = (2/3) * pi * R^3\n  - В конце верните значение объёма",
      "ExtendedDescription": "     Отлично! Какие же ещё операции нам доступны?\n     Конечно, остальные простейшие операции: <b><color=green>вычитание</color></b> (знак -), <b><color=green>умножение</color></b> (знак *) и <b><color=green>деление</color></b> (знак /). Знак ^ для возведения в степень здесь не работает, но его можно заменить умножением числа на само себя.\n     Важно: когда вы выполняете арифметику с числами разного типа, результат принимает наиболее \"общий\" тип, который включает в себя больший диапазон значений. Например,\n       2 + 3 = 5               // сложение int и int даёт int\n       3 * 1.5f = 4.5f         // умножение int на float даёт float\n       3.14 / 2 + 3.5f = 5.07  // результат действий будет double\n     Как мы видим, во втором примере результат был <i>приведён</i> к типу float, ведь он имеет дробную часть, а int - нет, однако float может содержать и целые числа, поэтому получается такой результат. Похожим образом объясняется и третий пример, только там double выбирается вместо float для того, чтобы хранить числа большей точности.\n     Всё это важно учитывать при работе с арифметикой, особенно при делении. Если вы хотите получить результат с дробной частью, то делить int на int - плохая идея, ведь этот тип не хранит знаки после запятой. Решение простое - поменять тип делимого на double. Например,\n       2 / 4 = 0\n       2.0 / 4 = 0.5\n     Используем эти знания в следующем задании!\n     Неплохо было бы перед путешествием зарядить нашего робота. Он может использовать как солнечную энергию, так и биотопливо, жидкое и твёрдое. Энергия Солнца - это прекрасно, но зарядка идёт не быстро, а в пасмурную погоду и вовсе не происходит. Но мы можем использовать второй вариант: получить энергию, сжигая древесину и всякую растительность. Например, этот гриб. Если он не слишком маленький, можно попробовать его использовать. Рассчитайте объём его шляпки, тогда мы сможем прикинуть, сколько энергии он нам даст. Здесь пригодится геометрия, но не переживайте, мы вам поможем!",
      "StartCode": "public double Execute()\n{\n    double pi = 3.14;\n    double R = 0.02;\n}"
    },
    {
      "ID": 3,
      "Title": "Всё должно быть поровну",
      "Description": "  - Запишите в переменную flowersCount количество растущих цветков\n  - В конце верните остаток от их деления на 2",
      "ExtendedDescription": "     Красивые цветы! Вот бы нарвать их и подарить родителям и друзьям! Интересно, хватит ли их всем...\n     Кстати, мы совсем забыли рассказать вам об ещё одном операции, которая тоже является очень важной - получение <b><color=green>остатка от деления</color></b> (обозначается знаком процента - %). Она может и не встречается в программах так часто, но это не отменяет её важности. Порой без неё просто не обойтись. Как и нам с нами в следующем задании.\n     Узнаем, получится ли разделить и подарить равное количество цветов маме и бабушке или останется лишний?\n     В этой задаче нам вновь предстоит работать с переменными, поэтому мы хотели бы рассказать вам о крайне полезной штуке - <b><color=green>var</color></b>. Это специально слово можно писать, когда мы объявляем и инициализируем переменную одновременно, тогда компилятор сам определит её тип в зависимости от присвоенного значения. Например, эти две записи\n          int number = 2;\n          var number = 2;\nработают одинаково. Var помогает быстрее и проще писать код, к тому же тип переменной поменяется автоматически, если мы изменим её значение.",
      "StartCode": "public int Execute()\n{\n\n\n}"
    },
    {
      "ID": 4,
      "Title": "Одним больше, одним меньше",
      "Description": "  - Увеличьте количество камней на 1, используя инкремент\n  - Ниже увеличьте их число втрое, используя сокращённую запись умножения\n  - В конце верните количество камней",
      "ExtendedDescription": "     Пока мы с вами считаем цветочки, робот всю дорогу считает камни, даже самые маленькие, которые нам, может, и не видны вовсе. Давайте и мы поучаствуем! Только сначала - небольшой секрет.\n     В языке C#, помимо обычных арифметических операций, есть ещё и <b><color=green>сокращённые</color></b>. Они позволяют выполнять те же действия и при этом писать меньше кода. Например,\n     number += 3;  //То же самое, что number = number + 3;\n     number *= 2;  //То же самое, что number = number * 2;\n     number++;     //Увеличивает значение на 1\n     number--;     //Уменьшает значение на 1\n     Сокращённую запись можно применять ко всем операторам (+, -, *, /, %). Предлагаем и вам попробовать её использовать в следующем задании. Посчитаем камни.",
      "StartCode": "public int Execute()\n{\n    int rocksCount = 99;\n\n}"
    }
  ]
}