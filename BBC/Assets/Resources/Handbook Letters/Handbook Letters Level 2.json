{
  "Items": [
    {
      "Title": "Условные конструкции и тип  bool",
      "Description":"Отдельный набор операций представляет условные выражения. Такие операции возвращают логическое значение, то есть значение типа <color=blue><b>bool</b></color>: <color=darkblue><b>true</b></color>, если выражение истинно, и <color=darkblue><b>false</b></color>, если выражение ложно. К подобным операциям относятся операции сравнения и логические операции.\n <color=orange><i>Условные конструкции</i></color> - один из базовых компонентов многих языков программирования, которые направляют работу программы по одному из путей в зависимости от определенных условий. В языке C# используются следующие условные конструкции: <color=blue> if..else и switch..case</color>\n <color=darkblue><b>Конструкция if/else</b></color>проверяет истинность некоторого условия и в зависимости от результатов проверки выполняет определенный код:\n int num1 = 8;\n int num2 = 6;\n if(num1 > num2)\n {\n Console.WriteLine($\"Число {num1} больше числа {num2}\");\n }\n После ключевого слова <color=yellow><i>if</i></color> ставится условие. И если это условие выполняется, то срабатывает код, который помещен далее в блоке if после фигурных скобок. В качестве условий выступают ранее рассмотренные операции сравнения. В данном случае у нас первое число больше второго, поэтому выражение num1 > num2 истинно и возвращает true, следовательно, управление переходит к строке Console.WriteLine($\"Число {num1} больше числа {num2}\");"
    },
    {
      "Title": "Операции сравнения",
      "Description":"В операциях сравнения сравниваются два операнда и возвращается значение типа <color=blue><b>bool</b></color> - <color=blue><b>true</b></color>, если выражение верно, и <color=blue><b>false</b></color>, если выражение неверно. \n <color=orange><b>==</b></color> сравнивает два операнда на равенство. Если они равны, то операция возвращает true, если не равны, то возвращается false:\n int a = 10;\n int b = 4;\n bool c = a == b; <color=green>// false. </color>\n <color=orange><b>!=</b></color> сравнивает два операнда и возвращает true, если операнды не равны, и false, если они равны.\n int a = 10;\n int b = 4;\n bool c = a != b;  <color=green>// true</color>\n bool d = a!=10;     <color=green>// false</color>\n <color=orange><b><</b></color>:Операция \"меньше чем\". Возвращает true, если первый операнд меньше второго, и false, если первый операнд больше второго.\n <color=orange><b>></b></color>:Операция \"больше чем\". Сравнивает два операнда и возвращает true, если первый операнд больше второго, иначе возвращает false.\n <color=orange><b><=</b></color>: Операция \"меньше или равно\". Сравнивает два операнда и возвращает true, если первый операнд меньше или равен второму. Иначе возвращает false.\n <color=orange><b>>=</b></color>: Операция \"больше или равно\". Сравнивает два операнда и возвращает true, если первый операнд больше или равен второму, иначе возвращается false.\n Если действие if состоит из одного оператора, его можно писать без фигурных скобок.\n if (a == 0) Console.WriteLine(\"A is zero\");\n В противном случае нужно обнести нужные операторы скобками."
    },
    {
      "Title": "Конструкция if/else",
      "Description":"Что, если мы захотим, чтобы при несоблюдении условия также выполнялись какие-либо действия? В этом случае мы можем добавить блок <color=darkblue><b>else</b></color>:\n int num1 = 8;\n int num2 = 6;\n if(num1 > num2)\n {\n Console.WriteLine($\"Число {num1} больше числа {num2}\");\n }\n else\n {\n   Console.WriteLine($\"Число {num1} меньше числа {num2}\");\n }"
    },
    {
      "Title": "Логические операторы && и ||",
      "Description": "Также в C# определены логические операторы, которые также возвращают значение типа <color=yellow><i>bool</i></color>. В качестве операндов они принимают значения типа bool. Как правило, применяются к отношениям и объединяют несколько операций сравнения.\n<color=orange><b>||</b></color>-Операция логического сложения. Возвращает true, если хотя бы один из операндов возвращает true.\n bool x1 = (5 > 6) || (4 < 6); <color=green>// 5 > 6 - false, 4 < 6 - true, поэтому возвращается true</color>\n<color=orange><b>&&</b></color> операция логического умножения. Возвращает true, если оба операнда одновременно равны true.\n bool x1 = (5 > 6) && (4 < 6); <color=green>// 5 > 6 - false, 4 < 6 - true, поэтому возвращается false</color>"
    },
    {
      "Title": "Конструкция else if",
      "Description":"Но при сравнении чисел мы можем насчитать три состояния: первое число больше второго, первое число меньше второго и числа равны. Используя конструкцию <color=darkblue><b>else if</b></color>, мы можем обрабатывать <color=orange>дополнительные условия</color>:\n int num1 = 8; \n int num2 = 6;\n if(num1 > num2)\n {\n   Console.WriteLine($\"Число {num1} больше числа {num2}\");\n }\n else if (num1 < num2)\n {\n Console.WriteLine($\"Число {num1} меньше числа {num2}\");\n }\n else\n {\n Console.WriteLine($\"Число num1 равно числу num2\");\n }."
    },
    {
      "Title": "Конструкция switch",
      "Description":"<color=darkblue><b>Switch</b></color> — это оператор выбора, который выбирает для выполнения один раздел switch из списка кандидатов, сравнивая их с <color=yellow>выражением соответствия</color>. Оператор switch часто используется вместо конструкции <color=darkblue>if-else</color>, если одно выражение проверяется на соответствие трем или больше условиям. Например, следующий оператор switch определяет, имеет ли переменная типа Color одно из трех значений:\n Color c = (Color) (new Random()).Next(0, 3);\n switch (c)\n {\n  case Color.Red:\n   Console.WriteLine(\"The color is red\");\n  break;\n case Color.Green:\n   Console.WriteLine(\"The color is green\");\n  break;\n  case Color.Blue:\n Console.WriteLine(\"The color is blue\");\n   break;\n  default:\n   Console.WriteLine(\"The color is unknown.\");\n   break;\n }\n После ключевого слова <color=blue><b>switch</b></color> в скобках идет сравниваемое выражение. Значение этого выражения последовательно сравнивается со значениями, помещенными после оператора <color=blue><b>сase</b></color>. И если совпадение будет найдено, то будет выполняться определенный блок <color=blue>сase</color>.\n В конце каждого блока сase должен ставиться один из операторов перехода: <color=blue>break, goto case, return или throw</color>. Как правило, используется оператор <color=blue>break</color>. При его применении другие блоки case выполняться не будут. Если мы хотим также обработать ситуацию, когда совпадения не будет найдено, то можно добавить блок <color=blue><b>default<\b></color>, как в примере выше."
    }
  ]
}