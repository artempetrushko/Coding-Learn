{
  "Items": [
    {
      "Title": "Сложение чмсел",
      "Description": "В C# используется большинство <color=yellow>операций</color>, которые применяются и в других языках программирования. <color=orange>Операции представляют определенные действия над операндами</color> - участниками операции. В качестве операнда может выступать переменной или какое-либо значение (например, число). Операции бывают <color=blue>унарными</color> (выполняются над одним операндом), <color=blue>бинарными</color> - над двумя операндами и <color=blue>тернарными</color> - выполняются над тремя операндами. Рассмотрим все виды операций.\n Операция <color=darkblue><b>сложения</b></color> двух чисел:\n int x = 10;\n int z = x + 12; <color=green>// 22</color>."
    },
    {
      "Title": "Арифметические операции и преобразование типов",
      "Description": "Операция <color=darkblue>вычитания</color> двух чисел:\n int x = 10;\n int z = x - 6; // 4\n Операция <color=darkblue>умножения</color> двух чисел:\n int x = 10;\n int z = x * 5; <color=green>// 50</color>\n Операция возведении в степень числа через умножение:\n int x = 10;\n int z = x * x; <color=green>// 100</color>\n операция <color=darkblue>деления</color> двух чисел:\n int x = 10;\n int z = x / 5; <color=green>// 2</color>\n При делении стоит учитывать, что если оба операнда представляют целые числа, то результат также будет округляться до целого числа.\n double z = 10 /  4; <color=green>//результат равен 2</color>\n Несмотря на то, что результат операции в итоге помещается в переменную типа double, которая позволяет сохранить дробную часть, но в самой операции участвуют два литерала, которые по умолчанию рассматриваются как объекты int, то есть целые числа, и результат то же будет целочисленный.\n Для выхода из этой ситуации необходимо определять литералы или переменные, участвующие в операции, именно как типы double или float\n double z = 10.0 /  4.0; <color=green>//результат равен 2.5</color>\n. Если преобразование нельзя выполнить без риска потери данных, компилятор требует выполнения явного преобразования, которое называется <color=yellow><i>приведением</i></color>. <color=orange><b>Приведение</b></color> — это способ явно указать компилятору, что необходимо выполнить преобразование и что вам известно, что может произойти потеря данных или приведение может завершиться сбоем во время выполнения. Чтобы выполнить приведение, укажите тип, в который производится приведение, в круглых скобках перед преобразуемым значением или переменной. В следующей программе выполняется приведение типа <color=blue>double в int</color>. Программа не будет компилироваться без приведения.\n double x = 1234.7;\n int a;\n a = (int)x; <color=green>// Output: 1234</color>."
    },
    {
      "Title": "Остаток от деления и var",
      "Description": "Операция <color=blue>получение остатка</color> от целочисленного деления двух чисел:\n double x = 10.0;\n double z = x % 4.0; <color=green>//результат равен 2</color>\n Часто понятно, какого типа должна быть переменная. В этом случае можно писать <color=darkblue>var</color>. Компилятор самостоятельно догадается, что именно вы имели в виду.\n var e = a / 2; <color=green>// это целое число</color>\n var f = a / 2.0; <color=green>// это число с плавающей точкой</color>."
    },
    {
      "Title": "Сокращенные операции, инкремент и декремент",
      "Description": "Ознакомимся с <color=orange>сокращенными операциями, инкрементом и декрементом</color>. <color=blue>Сокращенные операции</color>: \n a -= 4; <color=green>// То же самое, что a=a-4, аналогично с другими операциями. </color>\n <color=blue>Операция инкремента</color>. Инкремент бывает префиксным: ++x - сначала значение переменной x увеличивается на 1, а потом ее значение возвращается в качестве результата операции. И также существует постфиксный инкремент: x++ - сначала значение переменной x возвращается в качестве результата операции, а затем к нему прибавляется 1.\n a++; <color=green>//Оператор инкремента, то же самое, что a=a+1</color>\n ++a; <color=green>//То же самое, что a=a+1, но с одним отличием: </color>\n a = 5;\n Console.WriteLine(a++);<color=green>// выведет 5</color>\n a = 5;\n Console.WriteLine(++a); <color=green>// выведет 6</color>\n Операция <color=blue>декремента</color> или уменьшения значения на единицу. Также существует префиксная форма декремента (--x) и постфиксная (x--).\n a--; <color=green>//Оператор декремента, то же самое, что a=a-1."
    }
  ]
}