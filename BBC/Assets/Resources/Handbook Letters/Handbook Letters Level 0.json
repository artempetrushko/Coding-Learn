{
  "Items": [
    {
      "Title": "Знакомство с C#",
      "Description": "<color=darkblue><b>Язык С#</b></color> — новый язык программирования, разработанный <color=yellow>компанией Microsoft под платформу .NET</color> . Другие языки программирования были созданы до появления платформы .NET. Язык С# специально создавался под эту платформу, и поэтому в нем отсутствуют проблемы совместимости с предыдущими версиями языка. \n  Разработка приложений на языке С# ведется в платформе <color=orange>Visual Studio.Net</color>, куда помимо C# встроены такие языки программирования, как Visual Basic.NET и Visual C++. NET Runtime — «Среда выполнения». В этой среде выполняется код, полученный после компиляции программы, написанной на С#. Эта среда выполнения построена не на ассемблере (код, который является родным для процессора), а на промежуточном коде. Поэтому для данной «Среды выполнения» возможно использование нескольких языков программирования. \n  В теории программа, написанная для этой среды, может быть выполнена любой операционной системой, в которой NET Runtime установлена, и пока для этого существует только одна ОС — Windows. \n Базовым строительным блоком программы являются <color=darkblue><b>инструкции</b></color>. Инструкция представляет некоторое действие, например, арифметическую операцию, вызов метода, объявление переменной и присвоение ей значения. В конце каждой инструкции в C# ставится точка с запятой (;). Данный знак указывает компилятору на конец инструкции.\n  <color=yellow><b>Метод</b></color>  — это последовательность действий. Аналог функций, процедур и подпрограмм в других языках. В устной речи часто используют все эти слова как синонимы, но в спецификации на язык C# используется термин <color=blue><i>«метод»</i></color>. \n Если переменные хранят некоторые значения, то методы содержат собой набор операторов, которые выполняют определенные действия. По сути метод - это <color=orange>именованный блок кода, который выполняет некоторые действия</color>. \n Общее определение методов выглядит следующим образом: \n [модификаторы] тип_возвращаемого_значения название_метода ([параметры]) \n{\n <color=green>// тело метода</color>\n}\n Модификаторы и параметры необязательны. Например, по умолчанию консольная программа на языке C# должна содержать как минимум один метод - <color=darkblue>метод Main</color>, который является точкой входа в приложение: \nstatic void Main(string[] args)  \n{\n \n   }\n Ключевое слово <color=orange>static</color> является модификатором. Далее идет тип возвращаемого значения. В данном случае ключевое слово <color=orange>void</color>  указывает на то, что метод ничего не возвращает. \n Далее идет название метода - Main и в скобках параметры - string[] args. И в фигурные скобки заключено тело метода - все действия, которые он выполняет. В данном случае метод Main пуст, он не содержит никаких операторов и по сути ничего не выполняет. "
    },
    {
      "Title": "Сигнатура метода и return",
      "Description":"Метод может возвращать значение, какой-либо результат. В примере выше были определены два метода, которые имели тип <color=darkblue><b>void</b></color>. Методы с таким типом не возвращают никакого значения. Они просто выполняют некоторые действия. \n Если метод имеет любой другой тип, отличный от <color=yellow><i>void</i></color>, то такой метод обязан вернуть значение этого типа. Для этого применяется оператор <color=darkblue><b>return</b></color>, после которого идет возвращаемое значение: \n return возвращаемое значение; \n Например, определим еще пару методов: \n static string GetHello()\n{\nreturn\"Hello\";\n}\nstatic int GetSum()\n{\nint x = 2; \nint y = 3; \nint z = x + y; \nreturn z; \n}\nМетод GetHello имеет тип <color=yellow><i>string</i></color>, следовательно, он должен возвратить строку. Поэтому в теле метода используется оператор <color=orange><i>return</i></color>, после которого указана возвращаемая строка. \n Метод GetSum имеет тип <color=blue>int</color>, следовательно, он должен возвратить значение типа int - целое число. Поэтому в теле метода используется оператор return, после которого указано возвращаемое число (в данном случае результат суммы переменных x и y). \n После оператора return также можно указывать сложные выражения, которые возвращают определенный результат. Например: \n static int GetSum()\n{\nint x = 2; \nint y = 3; \nreturn x + y; \n}\nКак и во многих языках программирования, в C# есть своя система типов данных, которая используется для создания переменных. Тип данных определяет внутреннее представление данных, множество значений, которые может принимать объект, а также допустимые действия, которые можно применять над объектом.\n <color=darkblue><b>int</b></color>: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. Представлен системным типом System.Int32. Все целочисленные литералы по умолчанию представляют значения типа int: \n int a = 10; \nint b = 0b101;  <color=green>// бинарная форма b =5</color>\nint c = 0xFF;   <color=green>// шестнадцатеричная форма c = 255</color>"
    },
    {
      "Title": "Объявление и инициализация переменных",
      "Description":"Для хранения данных в программе применяются <color=darkblue><b>переменные</b></color>. Переменная представляет именнованную область памяти, в которой хранится значение определенного типа. Переменная имеет <color=orange>тип, имя и значение</color>. Тип определяет, какого рода информацию может хранить переменная. \n Перед использованием любую переменную надо определить. Синтаксис определения переменной выглядит следующим образом: тип имя_переменной; \n 1) имя может содержать любые цифры, буквы и символ подчеркивания, при этом первый символ в имени должен быть буквой или символом подчеркивания \n 2) в имени не должно быть знаков пунктуации и пробелов\n 3) имя не может быть ключевым словом языка C#. Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом. \n Хотя имя переменой может быть любым, но следует давать переменным описательные имена, которые будут говорить об их предназначении. Например, определим простейшую переменную: \n string name; \n В данном случае определена переменная name, которая имеет тип <color=blue><b>string</b></color>, то есть переменная представляет строку. Поскольку определение переменной представляет собой инструкцию, то после него ставится точка с запятой. \n После определения переменной можно присвоить некоторое значение: \n string name; \n name = \"Tom\";\n Так как переменная name представляет тип string, то есть строку, то мы можем присвоить ей строку в двойных кавычках. Причем переменной можно присвоить только то значение, которое соответствует ее типу.В дальнейшем с помощью имени переменной мы сможем обращаться к той области памяти, в которой хранится ее значение.Также мы можем сразу при определении присвоить переменной значение. Данный прием называется <color=orange><b>инициализацией</b></color>:\n string name = \"Tom\";"
    },
    {
      "Title": "double, float, long",
      "Description": "<color=yellow><i>Целочисленные типы данных</i></color> отлично подходят для работы с целыми числами, но есть ведь еще и дробные числа. И тут нам на помощь приходит <color=orange><b>тип данных с плавающей точкой</b></color>. Переменная такого типа может хранить любые действительные дробные значения, например: 4320.0, -3.33 или 0.01226. Почему точка «плавающая»? Дело в том, что точка/запятая перемещается («плавает») между цифрами, разделяя целую и дробную части значения. Есть три типа данных с плавающей точкой: <color=blue>float, double и long</color>. Типы данных с плавающей точкой всегда являются signed (т.е. могут хранить как положительные, так и отрицательные числа).\n <color=blue>double</color> - основной тип чисел с плавающей точкой.\n double realNumber = 12.34;\n <color=blue>float</color> - тип меньшей точности. Суффикс f говорит, что 1.234 - константа типа float, а не double. Используются в библиотеках работы с графикой в Windows.\n float floatNumber = 1.234f;\n <color=blue>long</color> (большие целые числа). Часто используется для подсчета миллисекунд. L - суффикс констант такого типа, чтобы не перепутать их с int.\n long longIntegerNumber = 3000000000000L;"
    }
  ]
}

