using System;
using System.Collections.Generic;
using System.Linq;

public class Level10Task4
{
//<playerCode>
    public enum Direction
    {
        Up,Down,Left,Right
    }
    public bool isTaskCompleted()
    {
        var random = new Random();
        var maxCount = 1000;
        var maxSize = 10000;
        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);
    }

    private bool Check(Random random, int maxCount, int maxSize)
    {
        var attacks = new List<Tuple<Direction, Direction, int>>()
        {
            Tuple.Create(Direction.Up,Direction.Down,random.Next(maxCount)),
            Tuple.Create(Direction.Up,Direction.Left,random.Next(maxCount)),
            Tuple.Create(Direction.Up,Direction.Right,random.Next(maxCount)),
            Tuple.Create(Direction.Up,Direction.Up,random.Next(maxCount)),
            Tuple.Create(Direction.Down,Direction.Down,random.Next(maxCount)),
            Tuple.Create(Direction.Down,Direction.Left,random.Next(maxCount)),
            Tuple.Create(Direction.Down,Direction.Right,random.Next(maxCount)),
            Tuple.Create(Direction.Down,Direction.Up,random.Next(maxCount)),
            Tuple.Create(Direction.Right,Direction.Down,random.Next(maxCount)),
            Tuple.Create(Direction.Right,Direction.Left,random.Next(maxCount)),
            Tuple.Create(Direction.Right,Direction.Right,random.Next(maxCount)),
            Tuple.Create(Direction.Right,Direction.Up,random.Next(maxCount)),
            Tuple.Create(Direction.Left,Direction.Down,random.Next(maxCount)),
            Tuple.Create(Direction.Left,Direction.Left,random.Next(maxCount)),
            Tuple.Create(Direction.Left,Direction.Right,random.Next(maxCount)),
            Tuple.Create(Direction.Left,Direction.Up,random.Next(maxCount)),
        };
        var attack = (Direction)random.Next(3);
        var correct=attacks.Where(x=>x.Item1==attack).OrderByDescending(x=>x.Item3).First().Item2;
        return FindNextAttack(attacks,attack)==correct;
    }

    private static void ReplaceCharInString(ref String str, int index, Char newSymb)
    {
        str = str.Remove(index, 1).Insert(index, newSymb.ToString());
    }
    
    private static string[] CreateArray(Random random, int maxCount, int maxSize,out int resultIndex)
    {
        var array = new string[random.Next(maxCount)];
        for (int i = 0; i < array.Length; i++)
        {
            array[i] = new string('a',random.Next(maxSize));
            if (random.Next(2) == 1)
            {
                var j=random.Next(array[i].Length);
                var str = array[i].ToUpper();
                ReplaceCharInString(ref str, j, char.ToLower(str[j]));
            }
        }
        resultIndex=random.Next(array.Length);
        array[resultIndex]=array[resultIndex].ToUpper();
        return array;
    }
    
}