[
  {
    "LinkedContentID": "Task_L5_T1",
    "Title": "Copy arrays",
    "Description": "You need to implement a method that returns a copy of the passed array of apple sizes.",
    "Tips": [
      "Create a new array that is a copy of the original one.",
      "Loop through the original array and pass the values of each element to the new array."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T2",
    "Title": "Select firewood",
    "Description": "You need to implement a method that returns a bool array of the same size as the input array and the size of the field.\n Depending on whether the size of the field is appropriate or not, the corresponding index in the output array must be true or false, respectively.\n The log matches if its size is less than or equal to the size passed.",
    "Tips": [
      "Create a bool array whose length is equal to the given array of logs.",
      "Fill the new array in the loop, comparing each element of the log array to the required length."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T3",
    "Title": "Mammoth Scam",
    "Description": "You need to implement a method that chooses which card to play (or pass)\n The available set of cards and the opponent's turn are passed as input.\n You need to return the value of the card to fight back, or -1 if the player passes .\n It is necessary to move with a card with the lowest suitable value, i.e. a higher value than the card that the opponent looked like, or an ace if there is nothing else suitable.\n The value of the cards is their number from 1 to 13. Ace, 2-10 ,jack, queen, king.\n It should be remembered that although the ace has the lowest value, it is a card that beats all the others (except for the ace, respectively).\n A player can have several cards with the same value.",
    "Tips": [
      "Compare the value of your cards with the value of your opponent's card."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T4",
    "Title": "Save Path",
    "Description": "You need to implement a method that converts an array of enums into an array of numbers for easier storage. An array of Direction enums is passed as input, which can be West, Nort, South, East.",
    "Tips": [
      "Each Enum value also has a numeric value, starting with 0."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T5",
    "Title": "Check Array",
    "Description": "You need to implement a method that checks the array against criteria. Criteria: array is not null, array has at least 1 element, first element of array is not 0.",
    "Tips": [
      "This is where the logical operators will help you. If you need to remember them, open the reference book."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T6",
    "Title": "2D array",
    "Description": "You need to implement a method that returns the desired element of a two-dimensional array. The input is a two-dimensional array, a color in the form of enum Color{Red,White,Grey}, and a shape in the form of enum Form{Gear,Triangle,Square}. \n Color corresponds to the first coordinate, shape to the second.",
    "Tips": [
      "You could use nested loops."
    ]
  },
  {
    "LinkedContentID": "Task_L5_T7",
    "Title": "Weight carried",
    "Description": "You need to implement a method that handles an array of the maximum carrying weight for a boat. You need to change the weight to -1 for boats that will not be able to carry the weight of the input. You need to return a modified copy of the array.",
    "Tips": [
      "Of course, you can't do without cycles! :)"
    ]
  }
]