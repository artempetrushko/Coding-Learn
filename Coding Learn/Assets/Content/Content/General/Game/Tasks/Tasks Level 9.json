[
  {
    "ID": "Task_L9_T1",
    "StartCode": "public static void BubbleSort(int[] array)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level9Task1\n{\n//<playerCode>\n    public static bool SortTests(int[] array)\n    {\n        var sortedArray=array.OrderBy(x=> x).ToArray();\n        BubbleSort(array);\n        return sortedArray.SequenceEqual(array);\n    }\n\n    private static int[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new int[random.Next(10, maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var val = random.Next(maxSize);\n            while (array.Contains(val))\n            {\n                val = random.Next(maxSize);\n            }\n            array[i]=val;\n        }\n\n        return array;\n    }\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array=CreateArray(random, maxCount, maxSize);\n        return SortTests(array);\n    }\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random,maxCount,maxSize)&& Check(random, maxCount, maxSize);\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L9_T2",
    "StartCode": "public static void CombSort(int[] array)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level9Task2\n{\n//<playerCode>\n    public static bool SortTests(int[] array)\n    {\n        var sortedArray = array.OrderBy(x => x).ToArray();\n        CombSort(array);\n        return sortedArray.SequenceEqual(array);\n    }\n\n    private static int[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new int[random.Next(10, maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var val = random.Next(maxSize);\n            while (array.Contains(val))\n            {\n                val = random.Next(maxSize);\n            }\n            array[i] = val;\n        }\n\n        return array;\n    }\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array = CreateArray(random, maxCount, maxSize);\n        return SortTests(array);\n    }\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize) && Check(random, maxCount, maxSize);\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L9_T3",
    "StartCode": "public static void QuickSort(int[] array)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level9Task3\n{\n//<playerCode>\n    public static bool SortTests(int[] array)\n    {\n        var sortedArray = array.OrderBy(x => x).ToArray();\n        QuickSort(array);\n        return sortedArray.SequenceEqual(array);\n    }\n\n    private static int[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new int[random.Next(10, maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var val = random.Next(maxSize);\n            while (array.Contains(val))\n            {\n                val = random.Next(maxSize);\n            }\n            array[i] = val;\n        }\n\n        return array;\n    }\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array = CreateArray(random, maxCount, maxSize);\n        return SortTests(array);\n    }\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize) && Check(random, maxCount, maxSize);\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L9_T4",
    "StartCode": "public static void MergeSort(int[] array)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level9Task4\n{\n//<playerCode>\n    public static bool SortTests(int[] array)\n    {\n        var sortedArray = array.OrderBy(x => x).ToArray();\n        MergeSort(array);\n        return sortedArray.SequenceEqual(array);\n    }\n\n    private static int[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new int[random.Next(10, maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var val = random.Next(maxSize);\n            while (array.Contains(val))\n            {\n                val = random.Next(maxSize);\n            }\n            array[i] = val;\n        }\n\n        return array;\n    }\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array = CreateArray(random, maxCount, maxSize);\n        return SortTests(array);\n    }\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize) && Check(random, maxCount, maxSize);\n    } \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L9_T5",
    "StartCode": "public int BinarySearch(string[] array, string desiredVal)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level9Task1\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize) && Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var list = CreateArray(random, maxCount, maxSize).OrderBy(x=>x).ToArray();\n        var desiredVal = list[random.Next(0,list.Length-1)];\n        var index = BinarySearch(list, desiredVal);\n        return list[index] == desiredVal;\n    }\n\n\n    private static string[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new string[random.Next(10, maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var val = $\"{random.Next(maxSize)}\";\n            while (array.Contains(val))\n            {\n                val = $\"{random.Next(maxSize)}\";\n            }\n            array[i] = val;\n        }\n\n        return array;\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  }
]