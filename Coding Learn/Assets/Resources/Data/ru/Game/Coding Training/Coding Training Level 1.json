{
  "Title": "Основы (часть 1)",
  "SubThemes": [
    {
      "Title": "Обучение",
      "Infos": [
        {
          "Title": "Начало",
          "Info": "     Привет, игрок! Добро пожаловать в <color=green>Coding Learn</color> - игру, где ты сможешь освоить азы программирования на <color=green>C#</color>, одном из самых популярных языков.\n     Тебе предстоит решать задачи при помощи написания кода, чтобы помочь главному герою - <color=green>роботу-помощнику</color> - преодолевать препятствия на его пути и продолжить его историю.\n     Сейчас расскажем немного подробнее.",
          "VideoTitle": ""
        },
        {
          "Title": "Обучение. Задание",
          "Info": "     Во время выполнения задания ты можешь увидеть его описание в <color=green>левом верхнем углу</color>. Кроме того, нажав на <color=green>серую кнопку</color> в углу, можно снова получить дополнительную информацию, которая появляется перед заданием.",
          "VideoTitle": "Game Training Task"
        },
        {
          "Title": "Обучение. Планшет",
          "Info": "     Для программирования нам нужен какой-нибудь инструмент, поэтому тебе доступен многофункциональный <color=green>планшет</color>. Чтобы включить его, достаточно <color=green>нажать на него</color>.",
          "VideoTitle": "Game Training Turn Pad On"
        },
        {
          "Title": "Обучение. Написание кода",
          "Info": "     Большую часть экрана планшета занимает поле для кода, здесь и происходит самое главное - <color=green>программирование</color>.",
          "VideoTitle": "Game Training Coding"
        },
        {
          "Title": "Обучение. Сброс кода",
          "Info": "     Если тебе вдруг кажется, что решение задачи зашло куда-то не туда, можно быстро вернуться к начальному коду с помощью кнопки <color=green>Сброс кода</color>.",
          "VideoTitle": "Game Training Reset Code"
        },
        {
          "Title": "Обучение. Подсказки",
          "Info": "     В случае, если непонятно, как решать задачу, ты можешь получить <color=green>подсказку</color>. Каждая подсказка становится доступна через несколько минут, поэтому лучше пытаться решить задачу самому. К тому же, это просто интереснее!)",
          "VideoTitle": "Game Training Advice Showing"
        },
        {
          "Title": "Обучение. Справочник",
          "Info": "     Решая задачи, ты будешь узнавать много нового о языке программирования. Чтобы ничего не забыть, ты можешь почитать специальный <color=green>справочник</color>, где собирается всё, что ты изучил ранее.",
          "VideoTitle": "Game Training Handbook"
        },
        {
          "Title": "Обучение. Испытания",
          "Info": "     Чтобы решать задачи было интересно, для каждой из них доступны <color=green>испытания</color>. За прохождение каждого ты будешь получать <color=green>звёзды</color>. Попробуй получить их все!",
          "VideoTitle": "Game Training Challenges"
        },
        {
          "Title": "Обучение. Ошибки",
          "Info": "     Если в коде ты вдруг допустишь <color=green>ошибку</color>, среда разработки сообщит тебе об этом, показав <color=green>сообщение</color> в нижней части экрана.",
          "VideoTitle": "Game Training Errors"
        },
        {
          "Title": "Обучение. Сворачивание планшета",
          "Info": "     Кнопка в <color=green>верхнем правом углу</color> планшета сворачивает его. Так ты сможешь увидеть локацию во время задания, что может быть иногда полезно - подсказки могут быть <color=green>повсюду</color>!",
          "VideoTitle": "Game Training Turn Pad Off"
        },
        {
          "Title": "Первое задание",
          "Info": "     Ну а теперь пришла пора программировать! Мы приготовили для тебя первую задачу, но не стоит бояться - она, разумеется, очень простая.",
          "VideoTitle": ""
        }
      ]
    },
    {
      "Title": "Знакомство с C#",
      "Infos": [
        {
          "Title": "Знакомство с C#. Инструкции, методы",
          "Info": "     Поздравляем, ты написал свою первую программу, которая работает! Но что вообще произошло? Почему мы написали то, что написали? Сейчас мы начнём знакомиться с <color=green>синтаксисом</color> языка и узнаем, что можно писать, как это писать, а главное - зачем.",
          "VideoTitle": ""
        },
        {
          "Title": "Структура программы",
          "Info": "     Окинем взором структуру программы, когда мы только создали <color=green>проект</color> приложения на C#. Видно, что стартовый шаблон довольно сложен, здесь много разных слов, скобочек и т.д. Всё это, разумеется, имеет смысл, но он станет понятен лишь позже, когда мы наберёмся опыта.\n     В наших программах весь пока не интересный нам код будет спрятан, но если вы чрезвычайно любопытны, то можете найти в Интернете <color=green>документацию</color> по C# и изучить его самостоятельно.",
          "VideoTitle": "C# Program Review"
        },
        {
          "Title": "Инструкции и методы",
          "Info": "     Наши первые программы будут ограничены одним <color=green>методом</color>. Методами в C# называют функции, которые есть и в других языках и выполняют набор записанных в них <color=green>инструкций</color>. Инструкции, в свою очередь, представляют собой различные команды, будь то сложить два числа, умножить их или <color=green>вызвать</color> другой метод, т.е. заставить выполниться другой набор инструкций. Каждая инструкция обязательно заканчивается точкой с запятой.\n Все программы на C# начинают выполняться с метода Main, это <color=green>точка входа</color> в программу. Мы же будем писать вспомогательные методы, которые будут вызываться в том числе и из Main.",
          "VideoTitle": ""
        },
        {
          "Title": "Аргументы метода",
          "Info": "     Вы могли заметить, что при вызове метода в прошлой задаче вы писали пустые скобочки? Зачем они нужны?\n     В скобочках методу можно передать <color=green>аргументы</color> - некоторые данные, которые могут быть использованы в инструкциях этого метода. Поскольку в прошлой задаче методу не нужны были никакие аргументы, мы оставили их <color=green>пустыми</color>.\n",
          "VideoTitle": ""
        },
        {
          "Title": "Методы с аргументами. Консоль",
          "Info": "     Сейчас потренируемся вызывать <color=green>методы с аргументами</color>. Для этого напишем, без малого, иконическую программу вывода на <color=green>консоль</color> фразы \"Hello, world!\".\n     <color=green>Консоль</color> - это, по сути, окно, в котором пользователь может взаимодействовать с программой, передавать ей данные или получать их. В С# можно вызвать методы консоли, написав Console., а затем имя какого-то метода. К сожалению, наш планшет не поддерживает работу с более чем одним окном, поэтому вывод фразы будет несколько <color=yellow>условным</color> - консоли мы не увидим, но зато поупражняемся в программировании!)",
          "VideoTitle": "Console Review"
        }
      ]
    },
    {
      "Title": "Типы данных (часть 1)",
      "Infos": [
        {
          "Title": "Типы данных. Переменные",
          "Info": "     Отлично! Мы с вами успешно вызвали метод с аргументом. Пришло время разобраться с тем, что мы передавали как аргумент - данными, вернее, <color=green>типами данных</color>, и тем, где они хранятся - <color=green>переменными</color>",
          "VideoTitle": ""
        },
        {
          "Title": "Переменные",
          "Info": "     Вообще, любая <color=green>переменная</color> - это некоторая <color=green>именованная</color>область в памяти компьютера, которая хранит данные по некоторому адресу. Поскольку она именованная, с помощью имени мы и можем обратиться к этому участку памяти и получить нужные данные.\n     К слову, данные бывают разных типов.",
          "VideoTitle": ""
        },
        {
          "Title": "Типы данных. Объявление переменной",
          "Info": "     <color=green>Типы данных</color> бывают разные, в зависимости от того, что мы хотим хранить в переменной - число, строку, объект или что-то ещё. Пока что познакомимся с <color=green>целочисленным</color> типом - <color=green>int</color>, хранящем целые числа (как положительные, так и отрицательные) из некоторого диапазона.\n     Чтобы <color=green>объявить</color> переменную (т.е. присвоить некоторой ячейке памяти имя), нужно указать тип данных, а затем, через пробел, имя переменной.",
          "VideoTitle": "Variables Declaration"
        },
        {
          "Title": "Присвоение значения переменной",
          "Info": "     Мы объявили переменную, но пока что она бесполезна - в ней просто ничего не хранится. Необходимо <color=green>присвоить</color> ей некое <color=green>значение</color>, которое мы сохраним в памяти. Для этого в следующей строке после объявления переменной нужно указать её имя, поставить <color=green>оператор присваивания</color> = и написать значение, соответствующее типу этой переменной.",
          "VideoTitle": "Variables Definition"
        },
        {
          "Title": "Инициализация переменной",
          "Info": "     Теперь мы знаем, как объявить переменную и присвоить её значение, но на это каждый раз требуется две строки кода. Было бы здорово выполнять эти операции <color=green>одновременно</color>...\n     И так можно сделать! Присвоение значения переменной при её объявлении называется <color=green>инициализацией</color> и выполняется она следующим образом: объявляется переменная и сразу после имени идёт оператор = и значение.\n     Теперь можно попрактиковаться! Хотя... есть ещё кое-что  важное!",
          "VideoTitle": "Variables Initialization"
        },
        {
          "Title": "Комментарии",
          "Info": "     В некоторых задачах и наших видео вы могли заметить <color=green>зелёные слова</color> после <color=green>двойного слеша</color>. Это <color=green>комментарии</color>, с их помощью можно оставлять пометки по коду, чтобы другим разработчикам было проще разобраться. Или например, если нужно убрать код из программы, но не стирать его, то можно поставить перед ним двойной слеш. Либо (если текст многострочный) обрамить его символами <color=green>/*</color> и <color=green>*/</color>.",
          "VideoTitle": "Commentaries"
        }
      ]
    },
    {
      "Title": "Типы данных (часть 2)",
      "Infos": [
        {
          "Title": "Типы float и double",
          "Info": "     Отлично, мы научились сохранять целые числа в переменные! Но что если нам нужно сохранить числа с дробной частью (или, как их ещё называют, числа с плавающей точкой)?\n     На помощь нам придут другие типы данных - <color=green>float</color> и <color=green>double</color>. В них можно записать как число как с дробной частью, так и без неё.",
          "VideoTitle": "Float Double"
        },
        {
          "Title": "Диапазон значений и размер в памяти",
          "Info": "     У вас мог возникнуть вопрос - а зачем нам использовать разные числовые типы, если они предназначены для одних и тех же данных?\n     Для хранения целых чисел и чисел с плавающей точкой предусмотрено довольно много типов данных. Каждый из них имеет свой <color=green>диапазон значений</color>. Например, double представляет собой число двойной (double) точности и способен хранить намного больше цифр после запятой, чем float (речь идёт о сотнях знаков!). Некоторые типы, наоборот, могут хранить числа из меньшего диапазона, чем, например, у int.\n     Это зависит от <color=green>кол-ва памяти</color>, выделенной под переменную. К примеру, каждая переменная типа int или float занимает 4 байта, а double - уже 8 байт! Поскольку память компьютера - ресурс <color=red>ограниченный</color>, при написании большой программы следует хорошенько подумать, где и какие типы данных подойдут лучше всего.",
          "VideoTitls": ""
        },
        {
          "Title": "Ключевое слово var",
          "Info": "     А теперь - минутка полезных лайфхаков! Если вы инициализируете переменную, то можно вместо типа данных указать ключевое слово <color=green>var</color>. Тогда <color=green>компилятор</color> (программа, которая собирает и запускает написанный нами код) определит тип переменной <color=green>автоматически</color>! Это крайне полезная возможность языка C#, которой пользоваться совсем не зазорно - применение var считается одной из хороших практик при написании кода!",
          "VideoTitle": "Var Usage"
        }
      ]
    },
    {
      "Title": "",
      "Infos": [
        {
          "Title": "Повторение",
          "Info": "     Поскольку вам теперь известны и числовые типы данных, и операции с ними, пришло время попрактиковаться!\n     В следующих задачах вам пригодятся все полученные знания. Удачи!",
          "VideoTitle": ""
        }
      ]
    },
    {
      "Title": "",
      "Infos": [
        {
          "Title": "Повторение",
          "Info": "     Наша практическая часть продолжается!\n     На очереди - новое задание. Оно не сильно сложнее предыдущего, а с вашим опытом решить её не составит труда. Вперёд!",
          "VideoTitle": ""
        }
      ]
    },
    {
      "Title": "Сокращённые операции",
      "Infos": [
        {
          "Title": "Сокращённые операции",
          "Info": "     Мы с вами освоили арифметику в C#, и это хорошо! Но есть проблема: иногда может возникнуть необходимость, например, к уже инициализированной переменной прибавить какое-то число. Такая инструкция будет довольно <color=red>длинной</color> из-за того, что в ней <color=red>дублируется</color> имя переменной, что не есть хорошо.",
          "VideoTitles": "Too Long Addition"
        },
        {
          "Title": "Сокращённые операции",
          "Info": "     Но есть способ сделать это элегантнее - с помощью <color=green>сокращённых</color> арифметических операций. Например, можно использовать оператор <color=green>+=</color> и, таким образом, прибавить к переменной некоторое число. Аналогичным образом работают и похожие операторы для вычитания (<color=green>-=</color>), умножения (<color=green>*=</color>) и деления (<color=green>/=</color>).",
          "VideoTitles": "Shortened Operations"
        },
        {
          "Title": "Инкремент и декремент",
          "Info": "     А в случае, если нам надо прибавить или вычесть из переменной единицу, есть способ ещё круче - использовать операторы <color=green>инкремента</color> (<color=green>++</color>) или <color=green>декремента</color> (<color=green>--</color>). И хотя использовать их очень просто, есть некоторые нюансы.",
          "VideoTitles": "Increment Usage"
        },
        {
          "Title": "Префиксный и постфиксный операторы",
          "Info": "     Есть два способа применить инкремент и декремент - написать его <color=green>перед переменной</color> или <color=green>после неё</color>. Это не влияет на результат, который окажется в переменной, но влияет на <color=green>порядок выполнения</color> программы в некоторых случаях. Например, передавая в метод переменную с инкрементом, возможны два сценария:\n     1) Если инкремент <color=green>префиксный</color>, сначала переменная увеличит своё значение, потом она будет передана в метод;\n     2) Если инкремент <color=green>постфиксный</color>, сначала переменная будет передана со старым значением, потом сработает инкремент.\n     Вывод: при использовании ++ или -- <color=green>будьте аккуратны</color>!",
          "VideoTitles": "Nuances of Increment"
        }
      ]
    },
    {
      "Title": "Остаток от деления",
      "Infos": [
        {
          "Title": "Остаток от деления",
          "Info": "     Помимо классических арифметических операций, при написании программ может быть полезно ещё одна - <color=green>получение остатка от деления</color>, это операция обозначается <color=green>%</color>.\n     Применяется он так же, как и простое деление одного целого числа на другое, однако результатом будет именно остаток, а не частное.",
          "VideoTitles": "Remainder Operator"
        }
      ]
    }
  ]
}