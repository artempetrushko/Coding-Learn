{
  "LinkedThemeID": "Loops",
  "Title": "Циклы",
  "SubThemes": [
    {
      "LinkedSubThemeID": "Introduction to loops. The for loop",
      "Title": "Знакомство с циклами. Цикл for",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Introducing Cycles",
          "Title": "Знакомство с циклами",
          "Info": "     Теперь мы затронем важную тему программирования – <color=green>циклы</color>. Циклы в языках программирования предназначены для построения конструкции, выполняющей заданный блок кода некоторое количество раз, которое определяется тем или иным условием. "
        },
        {
          "LinkedTrainingInfoID": "The for loop. Its construction",
          "Title": "Цикл for. Его конструкция",
          "Info": "     Рассмотрим один из вариантов построения цикла – <color=green>цикл for</color>. Он может использоваться в ситуациях, когда до входа в цикл известно количество итераций (повторений цикла). Имеет следующий вид:\n     for(<инициализация>; <условие>; <порядок выполнения>) \n     {\n        <действия>\n     }\n     <color=green>Инициализация</color> — установка начальных параметров счетчика;\n     <color=green>Условие</color> — условие выхода из цикла, как только оно вернет ложь — произойдет выход из цикла;\n     <color=green>Порядок выполнения</color> — команда увеличения счетчика.\n     Действия, выполняемые циклически, называются телом цикла."
        },
        {
          "LinkedTrainingInfoID": "For Loop Example",
          "Title": "Пример цикла for",
          "Info": "     Рассмотрим стандартный цикл for:\n     В нем мы инициализируем локальную переменную значением 0, затем проверяем, что переменная меньше десяти, выполняем тело цикла –прибавляем к переменной sum переменную i. На каждой итерации прибавляем к переменной значение, снова проверяем условие и выполняем тело цикла, и так, до тех пор, пока условие (i < 10) будет истинным. "
        }
      ]
    },
    {
      "LinkedSubThemeID": "Break operator",
      "Title": "Оператор break",
      "Infos": [
        {
          "LinkedTrainingInfoID": "For loop with break statement",
          "Title": "Цикл for с оператором break",
          "Info": "     Продолжим работать с циклом for. Иногда возникает ситуация, когда требуется выйти из цикла, не дожидаясь его завершения. В этом случае мы можем воспользоваться <color=green>оператором break</color>. Итак, <color=green>оператор break</color> используется для прерывания выполнения цикла. Рассмотрим прошлую задачу. Пусть теперь цикл прервется когда сумма чисел станет больше 30."
        }
      ]
    },
    {
      "LinkedSubThemeID": "Introduction to while. The while construct",
      "Title": "Цикл while",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Introduction to while. The while construct",
          "Title": "Знакомство с while. Конструкция while.",
          "Info": "     Теперь перейдем к другому варианту построения цикла - <color=green>цикла while</color>. В данном случае действия цикла повторяются до тех пор, пока выполняется указанное условие. Этот цикл функционирует по принципу: «Сперва думаем, после делаем». В общем виде выглядит так:\n     while(<Условие>)\n     {\n         <Действия>\n     } "
        },
        {
          "LinkedTrainingInfoID": "Variable naming rules. Language",
          "Title": "Правила наименования переменных. Язык",
          "Info": "     В этом цикле проверяется условие, и если оно истинно, то выполняется набор операторов внутри тела цикла. Обязательно убедитесь, что <color=green>изменяете переменную</color>, от которой зависит условие, иначе цикл станет бесконечным. Пример работы с циклом while: "
        }
      ]
    },
    {
      "LinkedSubThemeID": "Loop with another method condition",
      "Title": "Циклы и методы",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Loop with another method condition",
          "Title": "Цикл с условием другого метода",
          "Info": "     Мы также можем добавлять и <color=green>методы</color> в циклы. Например, добавим к прошлой задаче условие что числа должны быть простыми, и проверять это будет метод IsPrime: "
        }
      ]
    },
    {
      "LinkedSubThemeID": "The continue operator",
      "Title": "Оператор continue",
      "Infos": [
        {
          "LinkedTrainingInfoID": "The for loop with continue",
          "Title": "Цикл for с continue",
          "Info": "     Познакомимся с еще одним оператором циклов. Теперь поставим себе другую задачу. А что если мы хотим, чтобы при проверке цикл не завершался, а просто пропускал текущую итерацию. Для этого мы можем воспользоваться оператором <color=green>continue</color>. Итак, оператор <color=green>continue </color> используется для перехода к следующей итерации цикла. Пример: "
        }
      ]
    },
    {
      "LinkedSubThemeID": "Repetition 1",
      "Title": "Повторение",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Repetition",
          "Title": "Повторение",
          "Info": "      Мы узнали много нового про циклические конструкции, так что пора попрактиковаться! Решим ещё одну задачу."
        }
      ]
    },
    {
      "LinkedSubThemeID": "Nested Loops",
      "Title": "Вложенные циклы",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Nested Loops",
          "Title": "Вложенные циклы",
          "Info": "     Думаю, пришла пора ознакомиться с <color=green>вложенными циклами</color>. <color=green>Вложенные циклы</color> – это циклы, организованные в теле другого цикла. Вложенный цикл в тело другого цикла, называется внутренним циклом. Цикл, в теле которого существует вложенный цикл, называется внешним."
        },
        {
          "LinkedTrainingInfoID": "Iterations of inner loops",
          "Title": "Итерации внутренних циклов",
          "Info": "     Полное число <color=green>исполнений</color> внутреннего цикла, всегда равно произведению числа итераций внутреннего цикла на произведение чисел итераций всех внешних циклов, например, если внешний цикл имеет 5 итераций, а внутренний 10, то общее число итераций внутреннего цикла будет 5 * 10 = 50 итераций.\n     <color=red>Примечание</color>: для переменных счётчиков также действуют правила областей видимости, поэтому во вложенном цикле в качестве переменной счётчика нельзя снова создать переменную i – при попытке создания будет ошибка!"
        }
      ]
    },
    {
      "LinkedSubThemeID": "Repetition 2",
      "Title": "Повторение",
      "Infos": [
        {
          "LinkedTrainingInfoID": "Repetition",
          "Title": "Повторение",
          "Info": "     Пока что наших знаний о циклах будет достаточно для решения множества задач. Взять хотя бы следующую - вам она точно должна быть по зубам!"
        }
      ]
    }
  ]
}