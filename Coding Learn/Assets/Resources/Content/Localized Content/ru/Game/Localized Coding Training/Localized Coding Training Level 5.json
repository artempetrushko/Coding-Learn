{
  "LinkedContentID": "Arrays",
  "Title": "Массивы",
  "SubThemes": [
    {
      "LinkedContentID": "Introduction to arrays",
      "Title": "Знакомство с массивами",
      "Infos": [
        {
          "LinkedContentID": "Arrays in C#",
          "Title": "Массивы в C#",
          "Info": "     Итак, на данный момент мы знаем, что такое переменная, как задаётся её тип и как переменную инициализировать. Теперь, когда мы знаем какие виды циклов имеются в C# и в чём их отличия, можно детально изучать вопросы, связанные с использованием <color=green>массивов</color> C#. Допустим, у вам необходимо хранить в вашей программе 10 целочисленных значений. С одной стороны, если вам не лень вы можете объявить 10 переменных типа int, инициализировать их и работать. А что делать, если требуется 100 значений или 1000? Можно сделать проще — объявить переменную-массив и хранить в ней все значения. <color=green>Массив</color> – это структура данных для хранения элементом определенного типа, имеющая фиксированный размер. Доступ к элементам массива производится по числовому индексу. "
        },
        {
          "LinkedContentID": "Declaring arrays",
          "Title": "Объявление массивов",
          "Info": "    Для объявления массива, после указания типа его элементов, ставятся <color=green>квадратные скобки</color>:\n     int[] a1;\n     Перед использованием массив обязательно нужно <color=green>проинициализировать</color>, это можно сделать сразу, при его объявлении. Примеры объявления массивов на видео. "
        },
        {
          "LinkedContentID": "Accessing array elements. Traversing array elements.",
          "Title": "Доступ к элементам массива. Обход элементов массива.",
          "Info": "     Для обращения к элементам массива используются <color=green>индексы</color>. Индекс представляет номер элемента в массиве, при этом нумерация начинается с нуля, поэтому индекс первого элемента будет равен 0, индекс четвертого элемента - 3. При этом, если вы укажете индекс больше, чем максимально возможный, то будет выброшено исключение.\n     Обход элементов массива можно производить с помощью <color=green>циклов for, foreach и while</color>, последний самый неудобный для работы с массивами, его мы рассматривать не будем. Если вы работаете с циклом for, то для указания верхней границы инкрементируемой переменной можно воспользоваться <color=green>свойством Length</color> у массива. Каждый массив имеет свойство Length, которое хранит длину массива. Преимущество цикла for состоит в том, что в нем вы можете модифицировать элементы массива. "
        }
      ]
    },
    {
      "LinkedContentID": "Condition in array",
      "Title": "Знакомство с массивами (продолжение)",
      "Infos": [
        {
          "LinkedContentID": "Condition in array",
          "Title": "Условие в массиве",
          "Info": "     Также в наш массив можно добавлять <color=green>условия</color>. Попробуем добавить дополнительное условие и вывести значения только элементов с чётными индексами. "
        }
      ]
    },
    {
      "LinkedContentID": "The foreach loop",
      "Title": "Цикл foreach",
      "Infos": [
        {
          "LinkedContentID": "Condition in array, foreach",
          "Title": "Условие в массиве, foreach",
          "Info": "     Познакомимся с другим способом обхода массива. Более удобным для обхода элементов будет <color=green>цикл foreach</color>. Здесь в цикле foreach мы указали тип элементов int, так как у нас массив содержит элементы этого типа и после ключевого слова in указали массив элементы которого необходимо перебрать. Разберем на примере. "
        }
      ]
    },
    {
      "LinkedContentID": "Enums",
      "Title": "Enum",
      "Infos": [
        {
          "LinkedContentID": "Enums",
          "Title": "Enum",
          "Info": "     Кроме примитивных типов данных в языке программирования C# есть такой тип как <color=green>enum или перечисление</color>. Перечисления представляют набор логически связанных констант. Объявление перечисления происходит с помощью оператора enum:\n     enum название_перечисления\n     {\n     значение1,\n     значение2,\n      …..\n      значениеN\n     } "
        }
      ]
    },
    {
      "LinkedContentID": "Returning an array by condition",
      "Title": "Возврат массива",
      "Infos": [
        {
          "LinkedContentID": "Returning an array by condition",
          "Title": "Возвращение массива по условию",
          "Info": "     Иногда нам нужно возвращать не индексы или значения, а целый массив. Также можно прописывать условия, по которым можно отбирать нужный нам массив. "
        }
      ]
    },
    {
      "LinkedContentID": "Two-dimensional array",
      "Title": "Двумерный массив",
      "Infos": [
        {
          "LinkedContentID": "Two-dimensional array",
          "Title": "Двумерный массив",
          "Info": "     Теперь разберемся с <color=green>многомерными массивами</color>.  Теоретически мы можем задать массив с любым количеством измерений (которые кстати, называются рангом), но на практике, обычно встречаются одно-, двух- и намного реже — трехмерные массивы. Образно, двумерный массив можно представить как обычную таблицу, а трехмерный массив — как куб переменных. Например, чтобы задать двумерный массив чисел (ранг = 2), необходима сделать вот такое объявление переменной:\n     int[,] TwoDimArray;"
        },
        {
          "LinkedContentID": "Two-dimensional array robot",
          "Title": "Робота с двумерным массивом",
          "Info": "     Обратите внимание на запятую в квадратных скобках. В C# существует простое правило: ранг массива всегда на единицу больше количества запятых в квадратных скобках.  Инициализируются многомерные массивы точно также, как и одномерные — необходимо задать количество элементов в каждом измерении. Теперь, чтобы обратиться как какому-либо элементу массива, нам необходимо указывать два индекса — <color=green>индекс строки и индекс столбца</color>. Также для работы с многомерными массивами нам поможет <color=green>функция GetLength()</color>.GetLength возвращает длину заданного измерения многомерного массива. Length возвращает сумму общего количества элементов во всех измерениях. для двумерного массива, длина == метод getlength(0) * метод getlength(1)"
        }
      ]
    },
    {
      "LinkedContentID": "Condition in array (continuation)",
      "Title": "Повторение",
      "Infos": [
        {
          "LinkedContentID": "Condition in array (continuation)",
          "Title": "Условие в массиве",
          "Info": "     Повторите прошлые темы по условиям в массиве и решите эту задачу. Сейчас разберем еще одну задачу на тему условие в массиве. Решим задачу на поиск произведение элементов массива, которые больше заданного числа."
        }
      ]
    },
    {
      "LinkedContentID": "Repetition",
      "Title": "Повторение",
      "Infos": [
        {
          "LinkedContentID": "Task for *",
          "Title": "Задача на *",
          "Info": "    Это задача потруднее, повтори весь прошедший материал, чтобы решить задачу."
        }
      ]
    }
  ]
}