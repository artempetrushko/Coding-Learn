{
  "LinkedContentID": "Strings",
  "Title": "Строки",
  "SubThemes": [
    {
      "LinkedContentID": "Introduction to strings",
      "Title": "Введение в строки",
      "Infos": [
        {
          "LinkedContentID": "Introduction to strings",
          "Title": "Введение в строки",
          "Info": "В языке C# строковые значения представляет тип string. Строка — это объект типа String, значением которого является текст. Текст в свою очередь внутри программы хранится в виде набора символов, для которых существует свой собственный тип Char. Можно сказать, что строка похожа на обычный массив, элементами которого являются одиночные символы.\n\nСтроки создаются очень просто, вот один из самых интуитивно понятных способов: string <имя переменной> = “<текст>”;\nОбратите внимание, что текст обязательно заключается в двойные кавычки, в то время как одинарными кавычками выделяются одиночные символы. Отсюда следует, что для переменных типа Char используются одинарные кавычки, а для String - двойные. При этом строковая переменная может состоять и из одного символа, но вот символьная переменная из нескольких символов - нет."
        }
      ]
    },
    {
      "LinkedContentID": "String length",
      "Title": "Длина строки",
      "Infos": [
        {
          "LinkedContentID": "String length",
          "Title": "Длина строки",
          "Info": "Используя свойство Length, как и в обычном массиве, можно получить длину строки."
        }
      ]
    },
    {
      "LinkedContentID": "String as character set",
      "Title": "Строка как набор символов",
      "Infos": [
        {
          "LinkedContentID": "String as character set",
          "Title": "Строка как набор символов",
          "Info": "Так как строка хранит коллекцию символов, в ней определен индексатор для доступа к этим символам. Применяя индексатор, мы можем обратиться к строке как к массиву символов и получить по индексу любой из ее символов.\n\nКаждый символ при этом имеет свой регистр: нижний или верхний. Если буква заглавная, то ее регистр - верхний, а если нет - нижний. Цифры и специальные символы могут иметь только нижний регистр.\nЕго можно проверить, вызвав у char метод IsUpper().\n\nЧто еще можно делать со строками? Например, складывать их. Визуально это делается ровно также, как и сложение числовых переменных: через знак ‘+’. Результатом сложения будет новая строка."
        }
      ]
    },
    {
      "LinkedContentID": "String Separation",
      "Title": "Разделение строк",
      "Infos": [
        {
          "LinkedContentID": "String Separation",
          "Title": "Разделение строк",
          "Info": "С помощью функции Split мы можем разделить строку на массив подстрок. В качестве параметра функция Split принимает массив разделителей. Например, подсчитаем количество слов в строке, разделив ее по указанным символам:"
        }
      ]
    },
    {
      "LinkedContentID": "Concatenation of strings",
      "Title": "Объединение строк",
      "Infos": [
        {
          "LinkedContentID": "Concatenation of strings",
          "Title": "Объединение строк",
          "Info": "Кроме операции ‘+’ Для объединения строк также может использоваться метод string.Join(). Он принимает в параметры строку разделитель, посредством которой будут соединяться все остальные строки, переданные во втором аргументе."
        }
      ]
    },
    {
      "LinkedContentID": "StringBuilder class",
      "Title": "Класс StringBuilder",
      "Infos": [
        {
          "LinkedContentID": "StringBuilder class",
          "Title": "Класс StringBuilder",
          "Info": "Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет свои недостатки. Прежде всего, объект String представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с выделением ему достаточного места. Например, удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере производительности становятся более существенными.\nТо же самое касается и сложения строк, которым мы занимались ранее.\n\nЧтобы выйти из этой ситуации в С# был добавлен новый класс StringBuilder."
        },
        {
          "LinkedContentID": "Creating a StringBuilder",
          "Title": "Создание StringBuilder",
          "Info": "StringBuilder можно воспринимать как конструктор строк. Чтобы его использовать, для начала его нужно создать и передать в него строку, с которой планируется работать.\n\nУ него так же, как и у строк, есть свойство Length для получения длины и возможность индексации."
        },
        {
          "LinkedContentID": "String Operations in StringBuilder",
          "Title": "Операции со строками в StringBuilder",
          "Info": "Для операций над строками класс StringBuilder определяет ряд методов. Обратите внимание, что хоть его функционал и напоминает функциональность строк, но на больших объемах данных он работает намного быстрее:\n\n   * Append: добавляет подстроку в объект StringBuilder\n\n   * Insert: вставляет подстроку в объект StringBuilder, начиная с определенного индекса\n\n   * Remove: удаляет определенное количество символов, начиная с определенного индекса\n\n   * Replace: заменяет все вхождения определенного символа или подстроки на другой символ или подстроку\n\n   * AppendFormat: добавляет подстроку в конец объекта StringBuilder"
        }
      ]
    }
  ]
}