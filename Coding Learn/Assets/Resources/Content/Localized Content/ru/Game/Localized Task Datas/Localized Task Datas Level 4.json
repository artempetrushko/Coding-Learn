[
  {
    "LinkedContentID": "Task_L4_T1",
    "Title": "Чёрные ящики",
    "Description": "     Вам необходимо реализовать метод, который открывает ящики и считает количество успешно открытых. На вход передается общее количество ящиков. Необходимо вернуть количество успешно открытых ящиков.\n     Чтобы открыть ящик, используйте метод OpenContainer, который принимает порядковый номер ящика, начиная с нуля, который нужно открыть, и возвращает true/false, если ящик удалось/не удалось открыть.",
    "Tips": [
      "Тут не обойтись без циклов.",
      "Создай перед циклом свою переменную и записывай туда количество ящиков, которые смог открыть."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T2",
    "Title": "Хорошая находка",
    "Description": "     Вам необходимо реализовать метод, который находит в ящиках топор или пилу и дает сигнал о том, что текущий инструмент нужно подобрать.\n     На вход передаётся количество инструментов. Чтобы проверить инструмент, используйте методы  IsSaw и IsAxe. Чтобы подобрать инструмент, используйте метод PickUp.\n     Все три метода принимают номер проверяемого ящика, начиная с нуля.",
    "Tips": [
      "Циклы снова спешат на помощь :)",
      "Используй методы IsSaw и IsAxe в качестве условий - они возвращают true или false."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T3",
    "Title": "Путь свободен!",
    "Description": "     Вам необходимо реализовать метод, который расчищает путь до тех пор, пока он не станет свободен.\n     Чтобы проверить, что путь чист ипользуйте метод IsPathClear. Чтобы очистить текущий участок пути, используйте метод UseTool",
    "Tips": [
      "Цикл for здесь не подойдёт.",
      "Используй метод IsPathClear как условие."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T4",
    "Title": "Лесозаготовки",
    "Description": "     Вам необходимо реализовать метод, который определяет сколько нужно срубить деревьев и отправляет сигнал о том, что нужно использовать инструмент, чтобы разделить бревно.\n     На вход передается необходимое число бревен, на выходе нужно получить необходимое число деревьев.\n Из простого дерева получается 2 бревна, из высокого - 4. Чтобы определить, длинное ли дерево, используйте метод IsTreeTall. Чтобы разделить текущее дерево, используйте метод UseTool.",
    "Tips": [
      "Возможный алгоритм - пока нам нужны бревна, мы рубим дерево и уменьшаем количество нужных брёвен. Подумай, какой здесь подойдёт цикл.",
      "Определённо, нам нужно где-то хранить количество деревьев, которые нужно срубить.",
      "Используй метод IsTreeTall в качестве условия."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T5",
    "Title": "Наводим мосты: Часть вторая",
    "Description": "     Вам необходимо реализовать метод, который ремонтирует мост по частям (если это необходимо).\n     На вход передается количество частей моста. Чтобы определить, нужно ли чинить текущую часть, используйте метод IsBroken. Чтобы починить часть моста, используйте метод SetUpBoard.\n     Оба метода принимают порядковый номер части моста, начиная с 0.",
    "Tips": [
      "Нам известно количество частей моста - т.е. количество итераций нашего цикла. Подумай, какой из изученных тобой подойдёт здесь."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T6",
    "Title": "Тщательный осмотр",
    "Description": "     Вам необходимо реализовать метод, который ищет ключ.\n     На вход передается количество мест, в которых может быть ключ.\n     Чтобы поискать ключ в месте для поиска, используйте метод TryFoundKey, который принимает порядковый номер места для поиска и возвращает true/false, если нашел/не нашел ключ.",
    "Tips": [
      "Используй метод TryFoundKey в качестве условия."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T7",
    "Title": "Лотерея",
    "Description": "     Вам необходимо реализовать метод, который ищет ключ в сундуках.\n     На вход передается количество сундуков.\n     Чтобы выбрать следующий сундук, используйте метод ChooseNextItem. Чтобы проверить, есть ли ключ в ящике, используйте метод IsKeyFound.",
    "Tips": [
      "Используй метод ChooseNextItem в качестве условия."
    ]
  },
  {
    "LinkedContentID": "Task_L4_T8",
    "Title": "Маленький помощник",
    "Description": "    Вам необходимо реализовать метод, который ищет ключ в песке.\n     На вход передается число мест, в которых может быть ключ.\n     Чтобы копать используйте метод Dig, который принимает количество операций копания.\n     Чтобы посмотреть, есть ли в раскопаном месте ключ, используйте метод IsKeyFound.\n     Число копаний на 1 выше порядкового номера места, начиная с 1.",
    "Tips": [
      "Не забывай каждую итерацию увеличивать значения аргумента, передаваемого методу Dig, на 1."
    ]
  }
]