[
  {
    "ID": "Task_L10_T1",
    "StartCode": "public static double CountInitialVelocity(double x, double y, double angle)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level10Task1\n{\n//<playerCode>\n    public const double g = 9.8;\n    public static double DegToRad = (Math.PI / 180);\n    public static  double CountInitialVelocityCorrect(double x,double y,double angle)\n    {\n        var cos = Math.Cos(angle);\n        return Math.Sqrt(g*x*x/(2*(y-x*Math.Tan(angle))*cos*cos));\n    }\n    public bool isTaskCompleted()\n    {\n        var random=new Random();\n        return Check(random)&&Check(random);\n    }\n\n    public static bool Check(Random random)\n    {\n        var max = 1000;\n        var maxAngle = 89;\n        var x = random.Next(max) + random.NextDouble();\n        var y = random.Next(max) + random.NextDouble();\n        var angle=(random.Next(maxAngle)+random.NextDouble())*DegToRad;\n        return Math.Abs(CountInitialVelocityCorrect(x,y,angle)- CountInitialVelocity(x, y, angle))<0.0001;\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L10_T2",
    "StartCode": "public static bool CheckString(string str)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level10Task2\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        return Check();\n    }\n\n    private bool Check()\n    {\n        var firstTest = \"{}\";\n        var secondTest = \"(}\";\n        var thirdTest = \"{)\";\n        var fourthTest = \"({}[()])\";\n        var fifthTest = \"({}[(])\";\n        var sixthTest = \"{[}]\";\n        var seventhTest = \"(<{}[()]>)\";\n        var lastTest = \"(<{[}>)]\";\n        return CheckString(firstTest)&&!CheckString(secondTest)&&!CheckString(thirdTest)&&CheckString(fourthTest)\n            &&!CheckString(fifthTest)&&!CheckString(fifthTest)&&CheckString(seventhTest)&&!CheckString(lastTest);\n    }\n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L10_T3",
    "StartCode": "public bool CheckSituation(string[,] firstTest)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level10Task3\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n\n        return Check();\n    }\n\n    private bool Check()\n    {\n        var firstTest = new string[,]\n        {\n            {\"brk\",\"bkt\",\"bbp\",\"bqn\",\"bkg\",\"bbp\",\"bkt\",\"brk\"},\n            {\"bpn\",\"bpn\",\"bpn\",\"bpn\",\"bpn\",\"bpn\",\"bpn\",\"bpn\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"wpn\",\"wpn\",\"wpn\",\"wpn\",\"wpn\",\"wpn\",\"wpn\",\"wpn\"},\n            {\"wrk\",\"wkt\",\"wbp\",\"wqn\",\"wkg\",\"wbp\",\"wkt\",\"wrk\"}\n        };\n        var secondTest = new string[,]\n        {\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"bkg\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"bqn\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"wkg\",\"\",\"\",\"\",\"\",\"\",\"\"}\n        };\n        var thirdTest = new string[,]\n        {\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"bkg\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"wkg\",\"\",\"\",\"brk\",\"\"}\n        };\n        var fourthTest = new string[,]\n        {\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"bkg\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"wpn\"},\n            {\"\",\"bqn\",\"\",\"\",\"\",\"wkg\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"wqn\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n        };\n        var fithTest = new string[,]\n        {\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"bkg\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"bpn\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"bpn\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"wrk\",\"\",\"\"},\n            {\"\",\"\",\"\",\"\",\"\",\"\",\"wpn\",\"wpn\"},\n            {\"\",\"\",\"\",\"brk\",\"\",\"\",\"wkg\",\"\"}\n        };\n        return !CheckSituation(firstTest)&&CheckSituation(secondTest)&&CheckSituation(thirdTest)&&!CheckSituation(fourthTest)&&!CheckSituation(fithTest);\n    }\n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L10_T4",
    "StartCode": "public Direction FindNextAttack(List<Tuple<Direction, Direction, int>> attacks, Direction attack)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level10Task4\n{\n//<playerCode>\n    public enum Direction\n    {\n        Up,Down,Left,Right\n    }\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var attacks = new List<Tuple<Direction, Direction, int>>()\n        {\n            Tuple.Create(Direction.Up,Direction.Down,random.Next(maxCount)),\n            Tuple.Create(Direction.Up,Direction.Left,random.Next(maxCount)),\n            Tuple.Create(Direction.Up,Direction.Right,random.Next(maxCount)),\n            Tuple.Create(Direction.Up,Direction.Up,random.Next(maxCount)),\n            Tuple.Create(Direction.Down,Direction.Down,random.Next(maxCount)),\n            Tuple.Create(Direction.Down,Direction.Left,random.Next(maxCount)),\n            Tuple.Create(Direction.Down,Direction.Right,random.Next(maxCount)),\n            Tuple.Create(Direction.Down,Direction.Up,random.Next(maxCount)),\n            Tuple.Create(Direction.Right,Direction.Down,random.Next(maxCount)),\n            Tuple.Create(Direction.Right,Direction.Left,random.Next(maxCount)),\n            Tuple.Create(Direction.Right,Direction.Right,random.Next(maxCount)),\n            Tuple.Create(Direction.Right,Direction.Up,random.Next(maxCount)),\n            Tuple.Create(Direction.Left,Direction.Down,random.Next(maxCount)),\n            Tuple.Create(Direction.Left,Direction.Left,random.Next(maxCount)),\n            Tuple.Create(Direction.Left,Direction.Right,random.Next(maxCount)),\n            Tuple.Create(Direction.Left,Direction.Up,random.Next(maxCount)),\n        };\n        var attack = (Direction)random.Next(3);\n        var correct=attacks.Where(x=>x.Item1==attack).OrderByDescending(x=>x.Item3).First().Item2;\n        return FindNextAttack(attacks,attack)==correct;\n    }\n\n    private static void ReplaceCharInString(ref String str, int index, Char newSymb)\n    {\n        str = str.Remove(index, 1).Insert(index, newSymb.ToString());\n    }\n    \n    private static string[] CreateArray(Random random, int maxCount, int maxSize,out int resultIndex)\n    {\n        var array = new string[random.Next(maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            array[i] = new string('a',random.Next(maxSize));\n            if (random.Next(2) == 1)\n            {\n                var j=random.Next(array[i].Length);\n                var str = array[i].ToUpper();\n                ReplaceCharInString(ref str, j, char.ToLower(str[j]));\n            }\n        }\n        resultIndex=random.Next(array.Length);\n        array[resultIndex]=array[resultIndex].ToUpper();\n        return array;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L10_T5",
    "StartCode": "public int[] MergeSort(int[] fitstArray, int[] secondArray)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level10Task1\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var fitstArray=CreateArray(random, maxCount, maxSize);\n        var secondArray=CreateArray(random, maxCount, maxSize);\n        var correct=fitstArray.Concat(secondArray).OrderByDescending(x=>x).ToArray();\n        return correct.SequenceEqual(MergeSort(fitstArray,secondArray));\n    }\n\n\n    private static int[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new int[random.Next(maxCount)];\n        for (var i = 0; i < array.Length; i++)\n        {\n            array[i] =random.Next(maxSize);\n        }\n\n        return array;\n    } \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  }
]