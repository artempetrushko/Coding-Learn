[
  {
    "ID": "Task_L2_T1",
    "StartCode": "public int CountFlower(int oldCount)\n{\n    \n    \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level1Task1\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        return CountFlower(5)==6;\n    } \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L2_T2",
    "StartCode": "public int CorrectName(int mushroom123,int MUSHROOM,int redMushroom, int mushroomMushroom)\n{\n    \n    \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level1Task2\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        return CorrectName(5,10,8,0)==8;\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L2_T3",
    "StartCode": "public void Count(double fullness)\n{\n    \n    \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level1Task3\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        Count(0.5);\n        var value1 = CountModule.Counter==1;\n        CountModule.Free();\n        Count(0.4);\n        var value2 = CountModule.Counter==0;\n        CountModule.Free();\n        Count(0.1);\n        var value3 = CountModule.Counter==0;\n        CountModule.Free();\n        Count(0.99);\n        var value4 = CountModule.Counter==1;\n        return value1&&value4&&value2&&value3;\n    }\n    \n}\npublic class CountModule\n{\n    public static int Counter { get; private set; }\n    public static void Count(int count)\n    {\n        Counter += count;\n    }\n    public static void Free()\n    {\n        Counter = 0;\n    }\n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L2_T4",
    "StartCode": "public int Process(int digit,int number)\n{\n    \n    \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level1Task4\n{\n//<playerCode>\n    public bool IsTaskCompleted()\n    {\n        return Process(1,5)==32&&Process(0,5)==0;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L2_T5",
    "StartCode": "public void RemoveLog(object log)\n{\n    \n    \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level1Task5\n{\n//<playerCode>   \n    public readonly Log Log = new Log();\n    public void TakeLog(object log)\n    {\n        if(Log.Equals(log))\n            ((Log)log).TakeLog();\n    }\n    public void MoveLog(object log)\n    {\n        if (Log.Equals(log))\n            ((Log)log).MoveLog();\n    }\n    public void PutLog(object log)\n    {\n        if (Log.Equals(log))\n            ((Log)log).PutLog();\n    }\n    public bool isTaskCompleted()\n    {\n        RemoveLog(Log);\n        return Log.IsRemoved();\n    }\n    \n}\npublic class Log\n{\n    private bool _isLogTaken;\n    private bool _isLogMoved;\n    private bool _isLogPut;\n    public void TakeLog()\n    {\n        if (!_isLogTaken && !_isLogMoved && !_isLogPut)\n        {\n            _isLogTaken = true;\n        }\n    }\n    public void MoveLog()\n    {\n        if (_isLogTaken && !_isLogMoved && !_isLogPut)\n        {\n            _isLogMoved = true;\n        }\n    }\n    public void PutLog()\n    {\n        if (_isLogTaken && _isLogMoved && !_isLogPut)\n        {\n            _isLogPut = true;\n        }\n    }\n    public bool IsRemoved() => _isLogTaken && _isLogMoved && _isLogPut;\n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  }
]