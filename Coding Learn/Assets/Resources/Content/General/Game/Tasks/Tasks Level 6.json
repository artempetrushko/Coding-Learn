[
  {
    "ID": "Task_L6_T1",
    "StartCode": "public string FixNames()\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level6Task1\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        return FixNames().Equals(\"left\");\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T2",
    "StartCode": "public int GetLength(string str)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level6Task2\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxSize = 10000;\n        return Check(random, maxSize)&& Check(random, maxSize);\n    }\n\n    private bool Check(Random random, int maxSize)\n    {\n        var str = CreateArray(random,maxSize);\n        var testedLength = GetLength(str);\n        return testedLength == str.Length;\n    }\n    \n    private static string CreateArray(Random random,int maxSize)\n    {\n        var str = new string('1',random.Next(maxSize));\n        return str;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T3",
    "StartCode": "public string GetUpperLetters(string str)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level6Task3\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var str =new string(CreateArray(random, maxCount, maxSize));\n        var testedStr= GetUpperLetters(str);\n        var exampleList=new List<char>();\n        foreach (var e in str)\n        {\n            if (char.IsUpper(e))\n            {\n                exampleList.Add(e);\n            }\n        }\n        return testedStr.Equals(new string(exampleList.ToArray()));\n    }\n    \n    private static char[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new char[random.Next(maxCount)];\n        for (var i = 0; i < array.Length; i++)\n        {\n            array[i] =(char) random.Next(33,123);\n            if (random.Next(2) == 1)\n            {\n                array[i]=char.ToUpper(array[i]);\n            }\n        }\n\n        return array;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T4",
    "StartCode": "public int GetRightWay(string[] ways)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level6Task4\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array = CreateArray(random, maxCount, maxSize,out var result);\n        var testedWay = GetRightWay(array);\n        \n        return result==testedWay;\n    }\n    \n    private static void ReplaceCharInString(ref String str, int index, Char newSymb)\n    {\n        str = str.Remove(index, 1).Insert(index, newSymb.ToString());\n    }\n    \n    private static string[] CreateArray(Random random, int maxCount, int maxSize,out int resultIndex)\n    {\n        var array = new string[random.Next(maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            array[i] = new string('a',random.Next(maxSize));\n            if (random.Next(2) == 1)\n            {\n                var j=random.Next(array[i].Length);\n                var str = array[i].ToUpper();\n                ReplaceCharInString(ref str, j, char.ToLower(str[j]));\n            }\n        }\n        resultIndex=random.Next(array.Length);\n        array[resultIndex]=array[resultIndex].ToUpper();\n        return array;\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T5",
    "StartCode": "public string[] GetDecodedText(string[] text)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Level6Task5\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount, maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random random, int maxCount, int maxSize)\n    {\n        var array = CreateArray(random, maxCount, maxSize);\n        var testedArray = GetDecodedText(array);\n        var firstCheck = new List<string>();\n        foreach (var e in array)\n        {\n            if (char.IsLetter(e[0]))\n            {\n                firstCheck.Add(e);\n            }\n        }\n        firstCheck.Reverse();\n        return string.Join(\"\", firstCheck).Equals(string.Join(\"\",testedArray));\n    }\n    \n    private static void ReplaceCharInString(ref String str, int index, Char newSymb)\n    {\n        str = str.Remove(index, 1).Insert(index, newSymb.ToString());\n    }\n    private static char[] CreateCharArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new char[random.Next(maxCount)];\n        for (var i = 0; i < array.Length; i++)\n        {\n            array[i] =(char) random.Next(33,123);\n            if (random.Next(2) == 1)\n            {\n                array[i]=char.ToUpper(array[i]);\n            }\n        }\n\n        return array;\n    }\n    private static string[] CreateArray(Random random, int maxCount, int maxSize)\n    {\n        var array = new string[random.Next(maxCount)];\n        for (int i = 0; i < array.Length; i++)\n        {\n            array[i] = new string(CreateCharArray(random,maxCount,maxSize));\n            if (random.Next(2) == 1)\n            {\n                var j=0;\n                var str = array[i];\n                ReplaceCharInString(ref str, j, char.ToUpper(str[j]));\n            }\n        }\n        return array;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T6",
    "StartCode": "public string[] FixArray(string[] array)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Collections.Generic;\n\n\npublic class Level6Task6\n{\n//<playerCode>\n    public bool isTaskCompleted()\n    {\n        var taskArray = new string[]\n        {\n            \"00\",\n            \"0111110\",\n            \"00011100[F\",\n            \"]+00010201011\",\n            \"110\",\n            \"1111\",\n            \"10/\",\n            \"00010\",\n            \"2010104\",\n            \"444\",\n            \"0\",\n            \"0000*0\",\n            \"11102011104004000\",\n            \"55-10002000000400400050+3102444444444\",\n            \"4444050-31\",\n            \"240000\",\n            \"005\",\n            \"555500\",\n            \"050*[S]5\",\n            \"55555\",\n            \"5\",\n            \"500\",\n            \"05555\",\n            \"5\",\n            \"0\"\n        };\n        var taskLIArray = new string[]\n{\n            \"\"Lor\",\n            \"em ipsum \",\n            \"dolor sit amet, +\",\n            \"consectetur adipiscing elit, +\",\n            \"sed do eiusmod tempor incididunt \",\n            \"ut labore et dolore magna aliqua. -Ut en\",\n            \"im ad minim ve\",\n            \"niam, *quis nos\",\n            \"trud exercitation ull\",\n            \"amco laboris nisi ut aliquip ex\",\n            \"ea commodo c\",\n            \"onsequat. /Du\",\n            \"is aute irure \",\n            \"dolor in reprehenderit \",\n            \"in voluptat\",\n            \"e velit esse cillum \",\n            \"dolore eu fug\",\n            \"iat nulla pariatur. -Excepteur sint \",\n            \"occaecat cupidatat non proident, /\",\n            \"sunt in culpa\",\n            \" qui officia deserunt \",\n            \"mollit anim id est laborum.\"\"\n\n};\n        var taskLICorrectArray = new string[]\n        {\n            \"\"Lorem ipsum dolor sit amet, \",\n            \"consectetur adipiscing elit, \",\n            \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \",\n            \"Ut enim ad minim veniam, \",\n            \"quis nostrud exercitation ullamco laboris nisi ut aliquip exea commodo consequat. \",\n            \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \",\n            \"Excepteur sint occaecat cupidatat non proident, \",\n            \"sunt in culpa qui officia deserunt mollit anim id est laborum.\"\",\n        };\n        var taskCorrectArray = new string[]\n        {\n            \"00011111000011100[F]\",\n            \"00010201011110111110\",\n            \"00010201010444400000\",\n            \"01110201110400400055\",\n            \"10002000000400400050\",\n            \"31024444444444444050\",\n            \"31240000005555500050\",\n            \"[S]55555555000555550\"\n        };\n        return StringArrEquals( FixArray(taskArray),taskCorrectArray)&&StringArrEquals(FixArray(taskLIArray),taskCorrectArray) ;\n    }\n    private bool StringArrEquals(string[] arr1,string[] arr2)\n    {\n        if (arr1.Length != arr2.Length)\n            return false;\n        for (int i = 0; i < arr1.Length; i++)\n            if(arr1[i] != arr2[i]) \n                return false;\n        return true;\n    }  \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  },
  {
    "ID": "Task_L6_T7",
    "StartCode": " private string[] FixPathMatrix(string[] matrix)\n{\n \n \n}\n",
    "TestInfo": {
      "TestCode": "using System;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class Level6Task7\n{\n//<playerCode>\n    private readonly string[] pattern= new string[]\n        {\n            \"00000000000000000[F]\",\n            \"00000000000000000000\",\n            \"00000000000000000000\",\n            \"00000000000000000000\",\n            \"00000000000000000000\",\n            \"00000000000000000000\",\n            \"00000000000000000000\",\n            \"[S]00000000000000000\"\n        };\n    public bool isTaskCompleted()\n    {\n        var random = new Random();\n        return Check(random)&& Check(random);\n    }\n\n    private bool Check(Random random)\n    {\n        var array = CreateArray(random);\n        return StringArrEquals(CommonCheck(array), FixPathMatrix(array));\n    }\n    private bool StringArrEquals(string[] arr1, string[] arr2)\n    {\n        if (arr1.Length != arr2.Length)\n            return false;\n        for (int i = 0; i < arr1.Length; i++)\n            if (arr1[i] != arr2[i])\n                return false;\n        return true;\n    }\n    string[] CommonCheck(string[] arr)\n    {\n        var rgx = new Regex(\"[23456789]\");\n        var taskCorrectArray2 = new string[arr.Length];\n        for (int i = 0; i < arr.Length; i++)\n        {\n            taskCorrectArray2[i] = rgx.Replace(arr[i], \"0\");\n        }\n        return taskCorrectArray2;\n    }\n    private string[] CreateArray(Random random)\n    {\n        var array = new string[pattern.Length];\n        for (int i = 0; i < array.Length; i++)\n        {\n            var sb = new StringBuilder();\n            for (int j = 0; j < pattern[0].Length; j++)\n            {\n                if(pattern[i][j] == '0')\n                    sb.Append((char)random.Next(48, 57));\n                else sb.Append(pattern[i][j]);\n            }\n            array[i] = sb.ToString();\n        }\n\n        return array;\n    }   \n}",
      "TestMethodName": "isTaskCompleted",
      "PlayerCodePlaceholder": "//<playerCode>",
      "PlayerCodeStartRowNumber": 7
    },
    "ChallengeInfos": [
      {
        "Type": "SolveTask",
        "CheckValue": true
      },
      {
        "Type": "NoTips",
        "CheckValue": false
      },
      {
        "Type": "CompletingTimeLessThan",
        "CheckValue": 300
      }
    ]
  }
]