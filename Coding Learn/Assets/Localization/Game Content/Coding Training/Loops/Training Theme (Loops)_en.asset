%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e9620f8c34305754d8cc9a7e49e852d9, type: 3}
  m_Name: Training Theme (Loops)_en
  m_EditorClassIdentifier: 
  m_LocaleId:
    m_Code: en
  m_SharedData: {fileID: 11400000, guid: 57fac7604fd536a40a33f7b238bb3b4e, type: 2}
  m_Metadata:
    m_Items: []
  m_TableData:
  - m_Id: 472316174336
    m_Localized: Loops
    m_Metadata:
      m_Items: []
  - m_Id: 472332951552
    m_Localized: Introduction to loops. The for loop
    m_Metadata:
      m_Items: []
  - m_Id: 472332951553
    m_Localized: Introducing Cycles
    m_Metadata:
      m_Items: []
  - m_Id: 472332951554
    m_Localized: "Now we will touch on an important topic of programming - <color=green>loops</color>.
      Loops in programming languages \u200B\u200Bare designed to build a structure
      that executes a given block of code a certain number of times, which is determined
      by one or another condition."
    m_Metadata:
      m_Items: []
  - m_Id: 472332951555
    m_Localized: The for loop. Its construction
    m_Metadata:
      m_Items: []
  - m_Id: 472332951556
    m_Localized: "Let's consider one of the loop construction options - <color=green>for
      loop</color>. It can be used in situations where the number of iterations (loop
      repetitions) is known before entering the loop. It has the following form:\n 
      for (<initialization>; <condition>; <execution order>) \n  {\n  <actions>\n 
      }\n  <color=green>Initialization</color> \u2014 setting the initial parameters
      of the counter;\n  <color=green> Condition</color> is a condition for exiting
      the loop, as soon as it returns false, the loop will exit;\n  <color=green>Execution
      order</color> is a command to increase the counter.\n  Actions performed cyclically
      are called the loop body ."
    m_Metadata:
      m_Items: []
  - m_Id: 472332951557
    m_Localized: For Loop Example
    m_Metadata:
      m_Items: []
  - m_Id: 472332951558
    m_Localized: "Consider the standard loop for:\n  In it, we initialize the local
      variable with the value 0, then check that the variable is less than ten, execute
      the body of the loop - add the variable i to the variable sum. At each iteration,
      add the value to the variable, check again condition and execute the loop body,
      and so on, until the condition (i < 10) is true."
    m_Metadata:
      m_Items: []
  - m_Id: 472332951559
    m_Localized: Break operator
    m_Metadata:
      m_Items: []
  - m_Id: 472332951560
    m_Localized: For loop with break statement
    m_Metadata:
      m_Items: []
  - m_Id: 472332951561
    m_Localized: Let's continue with the for loop. Sometimes there is a situation
      when we need to exit the loop without waiting for it to complete. In this case,
      we can use the <color=green>break statement</color>. So, <color=green >statement
      break</color> is used to break the execution of the loop.Consider the previous
      problem.Now let the loop break when the sum of the numbers becomes greater
      than 30.
    m_Metadata:
      m_Items: []
  - m_Id: 472332951562
    m_Localized: Introduction to while. The while construct
    m_Metadata:
      m_Items: []
  - m_Id: 472332951563
    m_Localized: Introduction to while. The while construct
    m_Metadata:
      m_Items: []
  - m_Id: 472332951564
    m_Localized: "Now let's move on to another version of the loop construction -
      <color=green>while loop</color>. In this case, the actions of the loop are
      repeated until the specified condition is met. This loop functions according
      to the principle: First, we think after doing. In general, it looks like this:\n 
      while(<Condition>)\n  {\n  <Actions>\n  }"
    m_Metadata:
      m_Items: []
  - m_Id: 472332951565
    m_Localized: Variable naming rules. Language
    m_Metadata:
      m_Items: []
  - m_Id: 472332951566
    m_Localized: 'In this loop, the condition is checked, and if it is true, then
      a set of statements inside the loop body is executed. Be sure to <color=green>change
      the variable</color> on which the condition depends, otherwise the loop will
      become infinite. An example of working with a while loop:'
    m_Metadata:
      m_Items: []
  - m_Id: 472332951567
    m_Localized: Loop with another method condition
    m_Metadata:
      m_Items: []
  - m_Id: 472332951568
    m_Localized: Loop with another method condition
    m_Metadata:
      m_Items: []
  - m_Id: 472332951569
    m_Localized: 'We can also add <color=green>methods</color> to loops. For example,
      let''s add a condition to the previous task that numbers must be prime, and
      the IsPrime method will check this:'
    m_Metadata:
      m_Items: []
  - m_Id: 472332951570
    m_Localized: The continue operator
    m_Metadata:
      m_Items: []
  - m_Id: 472332951571
    m_Localized: The for loop with continue
    m_Metadata:
      m_Items: []
  - m_Id: 472332951572
    m_Localized: 'Let''s get acquainted with one more loop operator. Now let''s set
      ourselves another task. What if we want the loop to not end when checking,
      but simply skip the current iteration. To do this, we can use the <color=green>continue<
      operator /color> So the <color=green>continue </color> operator is used to
      go to the next iteration of the loop.Example:'
    m_Metadata:
      m_Items: []
  - m_Id: 472332951573
    m_Localized: Repetition
    m_Metadata:
      m_Items: []
  - m_Id: 472332951574
    m_Localized: Repetition
    m_Metadata:
      m_Items: []
  - m_Id: 472332951575
    m_Localized: We learned a lot about cyclic constructions, so it's time to practice!
      Let's solve one more problem.
    m_Metadata:
      m_Items: []
  - m_Id: 472332951576
    m_Localized: Nested Loops
    m_Metadata:
      m_Items: []
  - m_Id: 472332951577
    m_Localized: Nested Loops
    m_Metadata:
      m_Items: []
  - m_Id: 472332951578
    m_Localized: I think it's time to get familiar with <color=green>Nested Loops</color>.
      <color=green>Nested Loops</color> are loops organized within the body of another
      loop. A nested loop within the body of another loop , is called an inner loop,
      and a loop that contains a nested loop is called an outer loop.
    m_Metadata:
      m_Items: []
  - m_Id: 472332951579
    m_Localized: Iterations of inner loops
    m_Metadata:
      m_Items: []
  - m_Id: 472337145856
    m_Localized: "The total number of <color=green>executions</color> of the inner
      loop is always equal to the product of the number of iterations of the inner
      loop and the product of the number of iterations of all outer loops, for example,
      if the outer loop has 5 iterations and the inner loop has 10, then the total
      the number of iterations of the inner loop will be 5 * 10 = 50 iterations.\n 
      <color=red>Note</color>: counter variables are also subject to scope rules,
      so you cannot re-create i as a counter variable in the nested loop - if you
      try creation will be an error!"
    m_Metadata:
      m_Items: []
  - m_Id: 472337145857
    m_Localized: Repetition
    m_Metadata:
      m_Items: []
  - m_Id: 472337145858
    m_Localized: Repetition
    m_Metadata:
      m_Items: []
  - m_Id: 472337145859
    m_Localized: For now, our knowledge of cycles will be enough to solve a lot of
      problems. Take at least the following one - it should definitely be tough for
      you!
    m_Metadata:
      m_Items: []
  references:
    version: 2
    RefIds: []
