%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e9620f8c34305754d8cc9a7e49e852d9, type: 3}
  m_Name: Training Theme (Strings)_en
  m_EditorClassIdentifier: 
  m_LocaleId:
    m_Code: en
  m_SharedData: {fileID: 11400000, guid: c3520a4239e38b7438ff9f038b36708d, type: 2}
  m_Metadata:
    m_Items: []
  m_TableData:
  - m_Id: 14038130688
    m_Localized: Strings
    m_Metadata:
      m_Items: []
  - m_Id: 14054907904
    m_Localized: Introduction to strings
    m_Metadata:
      m_Items: []
  - m_Id: 14054907905
    m_Localized: Introduction to strings
    m_Metadata:
      m_Items: []
  - m_Id: 14054907906
    m_Localized: "In the C# language, string values are of type string. A string
      is an object of type String whose value is text. Text, in turn, is stored internally
      as a set of characters, for which there is their own type Char. We can say
      that a string is like a regular array, the elements of which are single characters.\n
      \n Strings are created very simply, here is one of the most intuitive ways:
      string <variable name> = \u201C<text>\u201D;\n Please note that the text must
      be enclosed in double quotes, while single quotes enclose single characters.It
      follows that variables of type Char use single quotes, and double quotes for
      String.A string variable can consist of a single character, but a character
      variable of several characters cannot ."
    m_Metadata:
      m_Items: []
  - m_Id: 14054907907
    m_Localized: String length
    m_Metadata:
      m_Items: []
  - m_Id: 14054907908
    m_Localized: String length
    m_Metadata:
      m_Items: []
  - m_Id: 14054907909
    m_Localized: Using the Length property, as in a normal array, you can get the
      length of a string.
    m_Metadata:
      m_Items: []
  - m_Id: 14054907910
    m_Localized: String as character set
    m_Metadata:
      m_Items: []
  - m_Id: 14054907911
    m_Localized: String as character set
    m_Metadata:
      m_Items: []
  - m_Id: 14054907912
    m_Localized: 'Because a string stores a collection of characters, it defines
      an indexer to access those characters. By using an indexer, we can refer to
      a string as an array of characters and get any of its characters by index.\n\nEach
      character is then has its own case: lowercase or uppercase. If the letter is
      capitalized, then its case is uppercase, and if not, it is lowercase.Digits
      and special characters can only have lowercase.\nIt can be checked by calling
      the IsUpper() method on char.\n What else can you do with strings? For example,
      add them. Visually this is done in exactly the same way as adding numeric variables
      through "+" sign. The result of the addition will be a new string'
    m_Metadata:
      m_Items: []
  - m_Id: 14054907913
    m_Localized: String Separation
    m_Metadata:
      m_Items: []
  - m_Id: 14054907914
    m_Localized: String Separation
    m_Metadata:
      m_Items: []
  - m_Id: 14054907915
    m_Localized: 'Using the Split function, we can split a string into an array of
      substrings. As a parameter, the Split function takes an array of delimiters.
      For example, let''s count the number of words in a string by dividing it by
      the specified characters:'
    m_Metadata:
      m_Items: []
  - m_Id: 14054907916
    m_Localized: Concatenation of strings
    m_Metadata:
      m_Items: []
  - m_Id: 14054907917
    m_Localized: Concatenation of strings
    m_Metadata:
      m_Items: []
  - m_Id: 14054907918
    m_Localized: "In addition to the \u2018+\u2019 operation, the string.Join() method
      can also be used to join strings. It takes a delimiter string as parameters,
      through which all other strings passed in the second argument will be joined."
    m_Metadata:
      m_Items: []
  - m_Id: 14054907919
    m_Localized: StringBuilder class
    m_Metadata:
      m_Items: []
  - m_Id: 14054907920
    m_Localized: StringBuilder class
    m_Metadata:
      m_Items: []
  - m_Id: 14054907921
    m_Localized: "Although the System.String class provides us with a lot of functionality
      for working with strings, it still has its drawbacks. First of all, the String
      object is an immutable string. When we execute any method of the String class,
      the system creates a new object in memory with sufficient space allocated to
      it.For example, deleting the first character is not the most expensive operation.However,
      when there are many such operations, and the amount of text for which these
      operations must be performed is also not the smallest, then the performance
      loss becomes more significant. \n The same applies to string addition, which
      we did earlier.\n \n To overcome this situation, a new StringBuilder class
      has been added to C#."
    m_Metadata:
      m_Items: []
  - m_Id: 14054907922
    m_Localized: Creating a StringBuilder
    m_Metadata:
      m_Items: []
  - m_Id: 14054907923
    m_Localized: "You can think of a StringBuilder as a string constructor. To use
      it, you first need to create it and pass it the string you want to work with.\n
      \n Like strings, it has a Length property to get length and possibility of
      indexing."
    m_Metadata:
      m_Items: []
  - m_Id: 14054907924
    m_Localized: String Operations in StringBuilder
    m_Metadata:
      m_Items: []
  - m_Id: 14054907925
    m_Localized: "For operations on strings, the StringBuilder class defines a number
      of methods. Note that although its functionality is similar to that of strings,
      it is much faster on large amounts of data:\n \n  * Append: appends a substring
      to a StringBuilder\n \n  * Insert: Inserts a substring into the StringBuilder
      object, starting at a specific index\n \n  * Remove: Removes a specific number
      of characters, starting at a specific index\n \n  * Replace: Replaces all occurrences
      of a specific character or substring with another character, or substring\n
      \n  * AppendFormat: Appends a substring to the end of the StringBuilder object"
    m_Metadata:
      m_Items: []
  references:
    version: 2
    RefIds: []
