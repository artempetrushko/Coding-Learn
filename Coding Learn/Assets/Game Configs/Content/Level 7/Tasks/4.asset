%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 204f7232bb70d634c8c913e9d9dbea0a, type: 3}
  m_Name: 4
  m_EditorClassIdentifier: 
  <Title>k__BackingField:
    m_TableReference:
      m_TableCollectionName: 
    m_TableEntryReference:
      m_KeyId: 0
      m_Key: 
    m_FallbackState: 0
    m_WaitForCompletion: 0
    m_LocalVariables: []
  <Description>k__BackingField:
    m_TableReference:
      m_TableCollectionName: 
    m_TableEntryReference:
      m_KeyId: 0
      m_Key: 
    m_FallbackState: 0
    m_WaitForCompletion: 0
    m_LocalVariables: []
  <StartCode>k__BackingField: 'public int SortAndSearch(List<int> list,int valueToSearch)

    {


    }'
  <TestData>k__BackingField:
    <TestCode>k__BackingField: using System;\nusing System.Collections.Generic;\nusing
      System.Linq;\n\npublic class Level5Task4\n{\n//<playerCode>\n    public bool
      isTaskCompleted()\n    {\n        var random = new Random();\n        var maxCount
      = 1000;\n        var maxSize = 10000;\n        return Check(random, maxCount,
      maxSize)&& Check(random, maxCount, maxSize);\n    }\n\n    private bool Check(Random
      random, int maxCount, int maxSize)\n    {\n        var list =CreateList(random,maxCount,maxSize)
      ;\n        var testedVal=random.Next(maxSize);\n        while (list.Contains(testedVal))\n       
      {\n            testedVal=random.Next(maxSize);\n        }\n        list.Add(testedVal);\n       
      Shuffle(list);\n        var count=list.Count;\n        var index=SortAndSearch(list,testedVal);\n       
      return list.Count==count&&SortCheck(list)&&list[index]==testedVal;\n    }\n\n   
      private bool SortCheck(List<int> list)\n    {\n        var val = list.First();\n       
      foreach(var item in list)\n        {\n            if (val > item)\n           
      {\n                return false;\n            }\n        }\n        return
      true;\n    }\n\n\n    private static Random rng = new Random((int)DateTime.Now.Ticks
      & 0x0000FFFF);\n\n\n    public static void Shuffle<T>(IList<T> list)\n    {\n       
      int n = list.Count;\n        while (n > 1)\n        {\n            n--;\n           
      int k = rng.Next(n + 1);\n            T value = list[k];\n            list[k]
      = list[n];\n            list[n] = value;\n        }\n    }\n    private static
      List<int> CreateList(Random random, int maxCount, int maxSize)\n    {\n       
      var array = new List<int>();\n        for (int i = 0; i < random.Next(10, maxCount);
      i++)\n        {\n            var val=random.Next(maxSize);\n            while
      (array.Contains(val))\n            {\n                val= random.Next(maxSize);\n           
      }\n            array.Add(val);\n        }\n        \n        return array;\n   
      } \n}
    <TestSettings>k__BackingField: {fileID: 11400000, guid: db8d7be98c2fe8d4487298176efef010, type: 2}
  <Tips>k__BackingField: []
  <Challenges>k__BackingField: {fileID: 11400000, guid: d743f68061c8a32419f677686c10b2e7, type: 2}
  references:
    version: 2
    RefIds: []
